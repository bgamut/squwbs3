### Script Generated by Control Surface Studio for Python 3 (resorted to default: no)
import Live
from _Framework.ControlSurface import ControlSurface
from _Framework.Layer import Layer
from _Framework.DeviceComponent import DeviceComponent
from _Framework.MixerComponent import MixerComponent
from _Framework.SliderElement import SliderElement
from _Framework.TransportComponent import TransportComponent
from _Framework.InputControlElement import *
from _Framework.ButtonElement import ButtonElement
from _Framework.ButtonMatrixElement import ButtonMatrixElement
from _Framework.SessionComponent import SessionComponent
from _Framework.EncoderElement import *
from Launchpad.ConfigurableButtonElement import ConfigurableButtonElement
import time
from itertools import chain
from _Framework.Util import find_if
import collections
import inspect
import threading
try:
	from .user import *
except ImportError:
	pass
class CustomEncoderElement(EncoderElement):
	def __init__(self, msg_type, channel, identifier, map_mode, css_send_midi_fn=None, log_message_fn=None, **kwargs):
		super(CustomEncoderElement, self).__init__(msg_type, channel, identifier, map_mode, **kwargs)
		self.led_fb_str = kwargs.get('led_fb_str', None)
		self.css_send_midi = css_send_midi_fn
		self.log_message = log_message_fn
	def send_value(self, value, force=False):
		if self.led_fb_str and self.css_send_midi:
			self.css_send_midi(self.led_fb_str, value)
		else:
			super().send_value(value, force)
class CustomConfigurableButtonElement(ConfigurableButtonElement):
	def __init__(self, is_momentary, msg_type, channel, identifier, css_send_midi_fn=None, log_message_fn=None, **kwargs):
		super(CustomConfigurableButtonElement, self).__init__(is_momentary, msg_type, channel, identifier)
		self.css_send_midi = css_send_midi_fn
		self.log_message = log_message_fn
		self.led_fb_str = kwargs.get('led_fb_str', None)
	def send_value(self, value, force=False):
		if self.led_fb_str and self.css_send_midi:
			self.css_send_midi(self.led_fb_str, value)
		else:
			super().send_value(value, force)
class CustomMixerComponent(MixerComponent):
	def tracks_to_use(self):
		return tuple(self.song().visible_tracks) + tuple(self.song().return_tracks)
class css_apcmini(ControlSurface):
	def __init__(self, c_instance):
		super(css_apcmini, self).__init__(c_instance)
		with self.component_guard():
			global _map_modes
			device = DeviceComponent(is_enabled=True, device_selection_follows_track_selection=True)
			self.set_device_component(device)
			_map_modes = Live.MidiMap.MapMode
			self.current_track_offset = 0
			self.current_scene_offset = 0
			global mixer
			num_tracks = 128
			num_returns = 24
			if hasattr(self, 'modifierList'):
				self.modifierList()
			if hasattr(self, 'customLists'):
				self.customLists()
			self._settings()
			self._inputs()
			self.turn_inputs_off()
			self.mixer = CustomMixerComponent(num_tracks, num_returns)
			global active_mode
			self.debug_on = False
			self.generate_relative_tracks_dict()
			self.mode_list()
			if len(self.modes) > 0:
				self.set_active_mode(self.modes[0])
			self.set_global_mode()
			self.listening_to_tracks()
			self.song().add_tracks_listener(self.listening_to_tracks)
			self.song().add_scenes_listener(self._on_scenes_changed)
			self.all_track_device_listeners()
			self.song().view.add_selected_parameter_listener(self._on_selected_parameter_changed)
			self.create_clip_slot_map()
			try:
				self.user = user(self)
			except:
				pass
			self.add_selected_chain_listeners()
			self.call_script_reaction(None, None, 'script_was_initialised')
			threading.Timer(1.8, self.show_message, args=('script is ready...',)).start()
	def port_settings_changed(self):
		super(css_apcmini, self).port_settings_changed()
		self.reload_led_listeners()
		self.call_script_reaction(None, None, 'port_settings_were_changed')
	def modifierList(self):
		global modifiers
		self.modifiers = {}
		self.modifiers["m1"] = {"value": 0}
		self.modifiers["m2"] = {"value": 0}
		self.modifiers["m3"] = {"value": 0}
		self.modifiers["m4"] = {"value": 0}
		self.modifiers["m5"] = {"value": 0}
		self.modifiers["m6"] = {"value": 0}
		self.modifiers["m7"] = {"value": 0}
		self.modifiers["m8"] = {"value": 0}
		self.modifiers["m9"] = {"value": 0}
		self.modifiers["m10"] = {"value": 0}
		self.modifiers["m11"] = {"value": 0}
		self.modifiers["m12"] = {"value": 0}
		self.modifiers["m13"] = {"value": 0}
		self.modifiers["m14"] = {"value": 0}
		self.modifiers["m15"] = {"value": 0}
		self.modifiers["m16"] = {"value": 0}
		self.modifiers["m17"] = {"value": 0}
		self.modifiers["m18"] = {"value": 0}
		self.modifiers["m19"] = {"value": 0}
		self.modifiers["m20"] = {"value": 0}
	def customLists(self):
		global lists
		self.lists = {}
		self.lists["list1"] = {"value": []}
		self.lists["list2"] = {"value": []}
		self.lists["list3"] = {"value": []}
		self.lists["list4"] = {"value": []}
		self.lists["list5"] = {"value": []}
		self.lists["list6"] = {"value": []}
		self.lists["list7"] = {"value": []}
		self.lists["list8"] = {"value": []}
		self.lists["list9"] = {"value": []}
		self.lists["list10"] = {"value": []}
	def _settings(self):
		self.global_feedback = "default"
		self.global_feedback_active = False
		self.global_LED_on = 127
		self.global_LED_off = 0
		self.controller_LED_on = 127
		self.controller_LED_off = 0
		self.led_on = self.controller_LED_on
		self.led_off = self.controller_LED_off
	def mode_list(self):
		global modes
		self.mode_conf = 4615
		self.global_mode = {}
		self.global_mode[0] = "1"
		self.modes = {}
	def _inputs(self):
		self.input_map = [
			"midi_cc_ch_0_val_48",
			"midi_cc_ch_0_val_49",
			"midi_cc_ch_0_val_50",
			"midi_cc_ch_0_val_51",
			"midi_cc_ch_0_val_52",
			"midi_cc_ch_0_val_53",
			"midi_cc_ch_0_val_54",
			"midi_cc_ch_0_val_55",
			"midi_cc_ch_0_val_56",
			"midi_note_ch_0_val_64",
			"midi_note_ch_0_val_65",
			"midi_note_ch_0_val_66",
			"midi_note_ch_0_val_67",
			"midi_note_ch_0_val_68",
			"midi_note_ch_0_val_69",
			"midi_note_ch_0_val_70",
			"midi_note_ch_0_val_71",
			"midi_note_ch_0_val_98",
			"midi_note_ch_0_val_89",
			"midi_note_ch_0_val_88",
			"midi_note_ch_0_val_87",
			"midi_note_ch_0_val_86",
			"midi_note_ch_0_val_85",
			"midi_note_ch_0_val_84",
			"midi_note_ch_0_val_83",
			"midi_note_ch_0_val_82",
			"midi_note_ch_0_val_56",
			"midi_note_ch_0_val_57",
			"midi_note_ch_0_val_58",
			"midi_note_ch_0_val_59",
			"midi_note_ch_0_val_60",
			"midi_note_ch_0_val_61",
			"midi_note_ch_0_val_62",
			"midi_note_ch_0_val_63",
			"midi_note_ch_0_val_48",
			"midi_note_ch_0_val_49",
			"midi_note_ch_0_val_50",
			"midi_note_ch_0_val_51",
			"midi_note_ch_0_val_52",
			"midi_note_ch_0_val_53",
			"midi_note_ch_0_val_54",
			"midi_note_ch_0_val_55",
			"midi_note_ch_0_val_40",
			"midi_note_ch_0_val_41",
			"midi_note_ch_0_val_42",
			"midi_note_ch_0_val_43",
			"midi_note_ch_0_val_44",
			"midi_note_ch_0_val_45",
			"midi_note_ch_0_val_46",
			"midi_note_ch_0_val_47",
			"midi_note_ch_0_val_32",
			"midi_note_ch_0_val_33",
			"midi_note_ch_0_val_34",
			"midi_note_ch_0_val_35",
			"midi_note_ch_0_val_36",
			"midi_note_ch_0_val_37",
			"midi_note_ch_0_val_38",
			"midi_note_ch_0_val_39",
			"midi_note_ch_0_val_24",
			"midi_note_ch_0_val_25",
			"midi_note_ch_0_val_26",
			"midi_note_ch_0_val_27",
			"midi_note_ch_0_val_28",
			"midi_note_ch_0_val_29",
			"midi_note_ch_0_val_30",
			"midi_note_ch_0_val_31",
			"midi_note_ch_0_val_16",
			"midi_note_ch_0_val_17",
			"midi_note_ch_0_val_18",
			"midi_note_ch_0_val_19",
			"midi_note_ch_0_val_20",
			"midi_note_ch_0_val_21",
			"midi_note_ch_0_val_22",
			"midi_note_ch_0_val_23",
			"midi_note_ch_0_val_8",
			"midi_note_ch_0_val_9",
			"midi_note_ch_0_val_10",
			"midi_note_ch_0_val_11",
			"midi_note_ch_0_val_12",
			"midi_note_ch_0_val_13",
			"midi_note_ch_0_val_14",
			"midi_note_ch_0_val_15",
			"midi_note_ch_0_val_0",
			"midi_note_ch_0_val_1",
			"midi_note_ch_0_val_2",
			"midi_note_ch_0_val_3",
			"midi_note_ch_0_val_4",
			"midi_note_ch_0_val_5",
			"midi_note_ch_0_val_6",
			"midi_note_ch_0_val_7"]
		self.midi_cc_ch_0_val_48 = CustomEncoderElement(MIDI_CC_TYPE, 0, 48, _map_modes.absolute, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_cc_ch_0_val_48.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_0_val_48.pre_val = -1
		self.midi_cc_ch_0_val_48.cur_val = -1
		self.midi_cc_ch_0_val_48.led_fb_str = "midi_cc_ch_0_val_48"
		self.midi_cc_ch_0_val_49 = CustomEncoderElement(MIDI_CC_TYPE, 0, 49, _map_modes.absolute, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_cc_ch_0_val_49.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_0_val_49.pre_val = -1
		self.midi_cc_ch_0_val_49.cur_val = -1
		self.midi_cc_ch_0_val_49.led_fb_str = "midi_cc_ch_0_val_49"
		self.midi_cc_ch_0_val_50 = CustomEncoderElement(MIDI_CC_TYPE, 0, 50, _map_modes.absolute, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_cc_ch_0_val_50.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_0_val_50.pre_val = -1
		self.midi_cc_ch_0_val_50.cur_val = -1
		self.midi_cc_ch_0_val_50.led_fb_str = "midi_cc_ch_0_val_50"
		self.midi_cc_ch_0_val_51 = CustomEncoderElement(MIDI_CC_TYPE, 0, 51, _map_modes.absolute, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_cc_ch_0_val_51.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_0_val_51.pre_val = -1
		self.midi_cc_ch_0_val_51.cur_val = -1
		self.midi_cc_ch_0_val_51.led_fb_str = "midi_cc_ch_0_val_51"
		self.midi_cc_ch_0_val_52 = CustomEncoderElement(MIDI_CC_TYPE, 0, 52, _map_modes.absolute, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_cc_ch_0_val_52.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_0_val_52.pre_val = -1
		self.midi_cc_ch_0_val_52.cur_val = -1
		self.midi_cc_ch_0_val_52.led_fb_str = "midi_cc_ch_0_val_52"
		self.midi_cc_ch_0_val_53 = CustomEncoderElement(MIDI_CC_TYPE, 0, 53, _map_modes.absolute, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_cc_ch_0_val_53.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_0_val_53.pre_val = -1
		self.midi_cc_ch_0_val_53.cur_val = -1
		self.midi_cc_ch_0_val_53.led_fb_str = "midi_cc_ch_0_val_53"
		self.midi_cc_ch_0_val_54 = CustomEncoderElement(MIDI_CC_TYPE, 0, 54, _map_modes.absolute, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_cc_ch_0_val_54.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_0_val_54.pre_val = -1
		self.midi_cc_ch_0_val_54.cur_val = -1
		self.midi_cc_ch_0_val_54.led_fb_str = "midi_cc_ch_0_val_54"
		self.midi_cc_ch_0_val_55 = CustomEncoderElement(MIDI_CC_TYPE, 0, 55, _map_modes.absolute, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_cc_ch_0_val_55.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_0_val_55.pre_val = -1
		self.midi_cc_ch_0_val_55.cur_val = -1
		self.midi_cc_ch_0_val_55.led_fb_str = "midi_cc_ch_0_val_55"
		self.midi_cc_ch_0_val_56 = CustomEncoderElement(MIDI_CC_TYPE, 0, 56, _map_modes.absolute, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_cc_ch_0_val_56.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_0_val_56.pre_val = -1
		self.midi_cc_ch_0_val_56.cur_val = -1
		self.midi_cc_ch_0_val_56.led_fb_str = "midi_cc_ch_0_val_56"
		self.midi_note_ch_0_val_64 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 64, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_64.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_64.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_64.pre_val = -1
		self.midi_note_ch_0_val_64.cur_val = -1
		self.midi_note_ch_0_val_64.led_fb_str = "midi_note_ch_0_val_64"
		self.midi_note_ch_0_val_65 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 65, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_65.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_65.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_65.pre_val = -1
		self.midi_note_ch_0_val_65.cur_val = -1
		self.midi_note_ch_0_val_65.led_fb_str = "midi_note_ch_0_val_65"
		self.midi_note_ch_0_val_66 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 66, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_66.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_66.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_66.pre_val = -1
		self.midi_note_ch_0_val_66.cur_val = -1
		self.midi_note_ch_0_val_66.led_fb_str = "midi_note_ch_0_val_66"
		self.midi_note_ch_0_val_67 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 67, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_67.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_67.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_67.pre_val = -1
		self.midi_note_ch_0_val_67.cur_val = -1
		self.midi_note_ch_0_val_67.led_fb_str = "midi_note_ch_0_val_67"
		self.midi_note_ch_0_val_68 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 68, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_68.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_68.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_68.pre_val = -1
		self.midi_note_ch_0_val_68.cur_val = -1
		self.midi_note_ch_0_val_68.led_fb_str = "midi_note_ch_0_val_68"
		self.midi_note_ch_0_val_69 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 69, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_69.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_69.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_69.pre_val = -1
		self.midi_note_ch_0_val_69.cur_val = -1
		self.midi_note_ch_0_val_69.led_fb_str = "midi_note_ch_0_val_69"
		self.midi_note_ch_0_val_70 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 70, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_70.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_70.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_70.pre_val = -1
		self.midi_note_ch_0_val_70.cur_val = -1
		self.midi_note_ch_0_val_70.led_fb_str = "midi_note_ch_0_val_70"
		self.midi_note_ch_0_val_71 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 71, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_71.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_71.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_71.pre_val = -1
		self.midi_note_ch_0_val_71.cur_val = -1
		self.midi_note_ch_0_val_71.led_fb_str = "midi_note_ch_0_val_71"
		self.midi_note_ch_0_val_98 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 98, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_98.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_98.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_98.pre_val = -1
		self.midi_note_ch_0_val_98.cur_val = -1
		self.midi_note_ch_0_val_98.led_fb_str = "midi_note_ch_0_val_98"
		self.midi_note_ch_0_val_89 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 89, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_89.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_89.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_89.pre_val = -1
		self.midi_note_ch_0_val_89.cur_val = -1
		self.midi_note_ch_0_val_89.led_fb_str = "midi_note_ch_0_val_89"
		self.midi_note_ch_0_val_88 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 88, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_88.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_88.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_88.pre_val = -1
		self.midi_note_ch_0_val_88.cur_val = -1
		self.midi_note_ch_0_val_88.led_fb_str = "midi_note_ch_0_val_88"
		self.midi_note_ch_0_val_87 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 87, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_87.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_87.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_87.pre_val = -1
		self.midi_note_ch_0_val_87.cur_val = -1
		self.midi_note_ch_0_val_87.led_fb_str = "midi_note_ch_0_val_87"
		self.midi_note_ch_0_val_86 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 86, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_86.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_86.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_86.pre_val = -1
		self.midi_note_ch_0_val_86.cur_val = -1
		self.midi_note_ch_0_val_86.led_fb_str = "midi_note_ch_0_val_86"
		self.midi_note_ch_0_val_85 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 85, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_85.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_85.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_85.pre_val = -1
		self.midi_note_ch_0_val_85.cur_val = -1
		self.midi_note_ch_0_val_85.led_fb_str = "midi_note_ch_0_val_85"
		self.midi_note_ch_0_val_84 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 84, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_84.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_84.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_84.pre_val = -1
		self.midi_note_ch_0_val_84.cur_val = -1
		self.midi_note_ch_0_val_84.led_fb_str = "midi_note_ch_0_val_84"
		self.midi_note_ch_0_val_83 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 83, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_83.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_83.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_83.pre_val = -1
		self.midi_note_ch_0_val_83.cur_val = -1
		self.midi_note_ch_0_val_83.led_fb_str = "midi_note_ch_0_val_83"
		self.midi_note_ch_0_val_82 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 82, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_82.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_82.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_82.pre_val = -1
		self.midi_note_ch_0_val_82.cur_val = -1
		self.midi_note_ch_0_val_82.led_fb_str = "midi_note_ch_0_val_82"
		self.midi_note_ch_0_val_56 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 56, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_56.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_56.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_56.pre_val = -1
		self.midi_note_ch_0_val_56.cur_val = -1
		self.midi_note_ch_0_val_56.led_fb_str = "midi_note_ch_0_val_56"
		self.midi_note_ch_0_val_57 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 57, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_57.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_57.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_57.pre_val = -1
		self.midi_note_ch_0_val_57.cur_val = -1
		self.midi_note_ch_0_val_57.led_fb_str = "midi_note_ch_0_val_57"
		self.midi_note_ch_0_val_58 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 58, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_58.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_58.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_58.pre_val = -1
		self.midi_note_ch_0_val_58.cur_val = -1
		self.midi_note_ch_0_val_58.led_fb_str = "midi_note_ch_0_val_58"
		self.midi_note_ch_0_val_59 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 59, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_59.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_59.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_59.pre_val = -1
		self.midi_note_ch_0_val_59.cur_val = -1
		self.midi_note_ch_0_val_59.led_fb_str = "midi_note_ch_0_val_59"
		self.midi_note_ch_0_val_60 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 60, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_60.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_60.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_60.pre_val = -1
		self.midi_note_ch_0_val_60.cur_val = -1
		self.midi_note_ch_0_val_60.led_fb_str = "midi_note_ch_0_val_60"
		self.midi_note_ch_0_val_61 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 61, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_61.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_61.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_61.pre_val = -1
		self.midi_note_ch_0_val_61.cur_val = -1
		self.midi_note_ch_0_val_61.led_fb_str = "midi_note_ch_0_val_61"
		self.midi_note_ch_0_val_62 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 62, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_62.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_62.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_62.pre_val = -1
		self.midi_note_ch_0_val_62.cur_val = -1
		self.midi_note_ch_0_val_62.led_fb_str = "midi_note_ch_0_val_62"
		self.midi_note_ch_0_val_63 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 63, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_63.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_63.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_63.pre_val = -1
		self.midi_note_ch_0_val_63.cur_val = -1
		self.midi_note_ch_0_val_63.led_fb_str = "midi_note_ch_0_val_63"
		self.midi_note_ch_0_val_48 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 48, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_48.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_48.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_48.pre_val = -1
		self.midi_note_ch_0_val_48.cur_val = -1
		self.midi_note_ch_0_val_48.led_fb_str = "midi_note_ch_0_val_48"
		self.midi_note_ch_0_val_49 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 49, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_49.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_49.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_49.pre_val = -1
		self.midi_note_ch_0_val_49.cur_val = -1
		self.midi_note_ch_0_val_49.led_fb_str = "midi_note_ch_0_val_49"
		self.midi_note_ch_0_val_50 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 50, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_50.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_50.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_50.pre_val = -1
		self.midi_note_ch_0_val_50.cur_val = -1
		self.midi_note_ch_0_val_50.led_fb_str = "midi_note_ch_0_val_50"
		self.midi_note_ch_0_val_51 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 51, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_51.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_51.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_51.pre_val = -1
		self.midi_note_ch_0_val_51.cur_val = -1
		self.midi_note_ch_0_val_51.led_fb_str = "midi_note_ch_0_val_51"
		self.midi_note_ch_0_val_52 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 52, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_52.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_52.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_52.pre_val = -1
		self.midi_note_ch_0_val_52.cur_val = -1
		self.midi_note_ch_0_val_52.led_fb_str = "midi_note_ch_0_val_52"
		self.midi_note_ch_0_val_53 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 53, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_53.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_53.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_53.pre_val = -1
		self.midi_note_ch_0_val_53.cur_val = -1
		self.midi_note_ch_0_val_53.led_fb_str = "midi_note_ch_0_val_53"
		self.midi_note_ch_0_val_54 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 54, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_54.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_54.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_54.pre_val = -1
		self.midi_note_ch_0_val_54.cur_val = -1
		self.midi_note_ch_0_val_54.led_fb_str = "midi_note_ch_0_val_54"
		self.midi_note_ch_0_val_55 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 55, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_55.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_55.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_55.pre_val = -1
		self.midi_note_ch_0_val_55.cur_val = -1
		self.midi_note_ch_0_val_55.led_fb_str = "midi_note_ch_0_val_55"
		self.midi_note_ch_0_val_40 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 40, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_40.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_40.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_40.pre_val = -1
		self.midi_note_ch_0_val_40.cur_val = -1
		self.midi_note_ch_0_val_40.led_fb_str = "midi_note_ch_0_val_40"
		self.midi_note_ch_0_val_41 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 41, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_41.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_41.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_41.pre_val = -1
		self.midi_note_ch_0_val_41.cur_val = -1
		self.midi_note_ch_0_val_41.led_fb_str = "midi_note_ch_0_val_41"
		self.midi_note_ch_0_val_42 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 42, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_42.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_42.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_42.pre_val = -1
		self.midi_note_ch_0_val_42.cur_val = -1
		self.midi_note_ch_0_val_42.led_fb_str = "midi_note_ch_0_val_42"
		self.midi_note_ch_0_val_43 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 43, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_43.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_43.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_43.pre_val = -1
		self.midi_note_ch_0_val_43.cur_val = -1
		self.midi_note_ch_0_val_43.led_fb_str = "midi_note_ch_0_val_43"
		self.midi_note_ch_0_val_44 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 44, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_44.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_44.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_44.pre_val = -1
		self.midi_note_ch_0_val_44.cur_val = -1
		self.midi_note_ch_0_val_44.led_fb_str = "midi_note_ch_0_val_44"
		self.midi_note_ch_0_val_45 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 45, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_45.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_45.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_45.pre_val = -1
		self.midi_note_ch_0_val_45.cur_val = -1
		self.midi_note_ch_0_val_45.led_fb_str = "midi_note_ch_0_val_45"
		self.midi_note_ch_0_val_46 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 46, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_46.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_46.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_46.pre_val = -1
		self.midi_note_ch_0_val_46.cur_val = -1
		self.midi_note_ch_0_val_46.led_fb_str = "midi_note_ch_0_val_46"
		self.midi_note_ch_0_val_47 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 47, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_47.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_47.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_47.pre_val = -1
		self.midi_note_ch_0_val_47.cur_val = -1
		self.midi_note_ch_0_val_47.led_fb_str = "midi_note_ch_0_val_47"
		self.midi_note_ch_0_val_32 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 32, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_32.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_32.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_32.pre_val = -1
		self.midi_note_ch_0_val_32.cur_val = -1
		self.midi_note_ch_0_val_32.led_fb_str = "midi_note_ch_0_val_32"
		self.midi_note_ch_0_val_33 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 33, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_33.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_33.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_33.pre_val = -1
		self.midi_note_ch_0_val_33.cur_val = -1
		self.midi_note_ch_0_val_33.led_fb_str = "midi_note_ch_0_val_33"
		self.midi_note_ch_0_val_34 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 34, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_34.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_34.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_34.pre_val = -1
		self.midi_note_ch_0_val_34.cur_val = -1
		self.midi_note_ch_0_val_34.led_fb_str = "midi_note_ch_0_val_34"
		self.midi_note_ch_0_val_35 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 35, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_35.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_35.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_35.pre_val = -1
		self.midi_note_ch_0_val_35.cur_val = -1
		self.midi_note_ch_0_val_35.led_fb_str = "midi_note_ch_0_val_35"
		self.midi_note_ch_0_val_36 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 36, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_36.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_36.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_36.pre_val = -1
		self.midi_note_ch_0_val_36.cur_val = -1
		self.midi_note_ch_0_val_36.led_fb_str = "midi_note_ch_0_val_36"
		self.midi_note_ch_0_val_37 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 37, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_37.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_37.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_37.pre_val = -1
		self.midi_note_ch_0_val_37.cur_val = -1
		self.midi_note_ch_0_val_37.led_fb_str = "midi_note_ch_0_val_37"
		self.midi_note_ch_0_val_38 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 38, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_38.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_38.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_38.pre_val = -1
		self.midi_note_ch_0_val_38.cur_val = -1
		self.midi_note_ch_0_val_38.led_fb_str = "midi_note_ch_0_val_38"
		self.midi_note_ch_0_val_39 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 39, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_39.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_39.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_39.pre_val = -1
		self.midi_note_ch_0_val_39.cur_val = -1
		self.midi_note_ch_0_val_39.led_fb_str = "midi_note_ch_0_val_39"
		self.midi_note_ch_0_val_24 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 24, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_24.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_24.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_24.pre_val = -1
		self.midi_note_ch_0_val_24.cur_val = -1
		self.midi_note_ch_0_val_24.led_fb_str = "midi_note_ch_0_val_24"
		self.midi_note_ch_0_val_25 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 25, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_25.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_25.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_25.pre_val = -1
		self.midi_note_ch_0_val_25.cur_val = -1
		self.midi_note_ch_0_val_25.led_fb_str = "midi_note_ch_0_val_25"
		self.midi_note_ch_0_val_26 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 26, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_26.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_26.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_26.pre_val = -1
		self.midi_note_ch_0_val_26.cur_val = -1
		self.midi_note_ch_0_val_26.led_fb_str = "midi_note_ch_0_val_26"
		self.midi_note_ch_0_val_27 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 27, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_27.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_27.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_27.pre_val = -1
		self.midi_note_ch_0_val_27.cur_val = -1
		self.midi_note_ch_0_val_27.led_fb_str = "midi_note_ch_0_val_27"
		self.midi_note_ch_0_val_28 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 28, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_28.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_28.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_28.pre_val = -1
		self.midi_note_ch_0_val_28.cur_val = -1
		self.midi_note_ch_0_val_28.led_fb_str = "midi_note_ch_0_val_28"
		self.midi_note_ch_0_val_29 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 29, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_29.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_29.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_29.pre_val = -1
		self.midi_note_ch_0_val_29.cur_val = -1
		self.midi_note_ch_0_val_29.led_fb_str = "midi_note_ch_0_val_29"
		self.midi_note_ch_0_val_30 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 30, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_30.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_30.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_30.pre_val = -1
		self.midi_note_ch_0_val_30.cur_val = -1
		self.midi_note_ch_0_val_30.led_fb_str = "midi_note_ch_0_val_30"
		self.midi_note_ch_0_val_31 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 31, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_31.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_31.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_31.pre_val = -1
		self.midi_note_ch_0_val_31.cur_val = -1
		self.midi_note_ch_0_val_31.led_fb_str = "midi_note_ch_0_val_31"
		self.midi_note_ch_0_val_16 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 16, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_16.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_16.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_16.pre_val = -1
		self.midi_note_ch_0_val_16.cur_val = -1
		self.midi_note_ch_0_val_16.led_fb_str = "midi_note_ch_0_val_16"
		self.midi_note_ch_0_val_17 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 17, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_17.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_17.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_17.pre_val = -1
		self.midi_note_ch_0_val_17.cur_val = -1
		self.midi_note_ch_0_val_17.led_fb_str = "midi_note_ch_0_val_17"
		self.midi_note_ch_0_val_18 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 18, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_18.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_18.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_18.pre_val = -1
		self.midi_note_ch_0_val_18.cur_val = -1
		self.midi_note_ch_0_val_18.led_fb_str = "midi_note_ch_0_val_18"
		self.midi_note_ch_0_val_19 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 19, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_19.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_19.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_19.pre_val = -1
		self.midi_note_ch_0_val_19.cur_val = -1
		self.midi_note_ch_0_val_19.led_fb_str = "midi_note_ch_0_val_19"
		self.midi_note_ch_0_val_20 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 20, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_20.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_20.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_20.pre_val = -1
		self.midi_note_ch_0_val_20.cur_val = -1
		self.midi_note_ch_0_val_20.led_fb_str = "midi_note_ch_0_val_20"
		self.midi_note_ch_0_val_21 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 21, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_21.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_21.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_21.pre_val = -1
		self.midi_note_ch_0_val_21.cur_val = -1
		self.midi_note_ch_0_val_21.led_fb_str = "midi_note_ch_0_val_21"
		self.midi_note_ch_0_val_22 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 22, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_22.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_22.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_22.pre_val = -1
		self.midi_note_ch_0_val_22.cur_val = -1
		self.midi_note_ch_0_val_22.led_fb_str = "midi_note_ch_0_val_22"
		self.midi_note_ch_0_val_23 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 23, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_23.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_23.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_23.pre_val = -1
		self.midi_note_ch_0_val_23.cur_val = -1
		self.midi_note_ch_0_val_23.led_fb_str = "midi_note_ch_0_val_23"
		self.midi_note_ch_0_val_8 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 8, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_8.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_8.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_8.pre_val = -1
		self.midi_note_ch_0_val_8.cur_val = -1
		self.midi_note_ch_0_val_8.led_fb_str = "midi_note_ch_0_val_8"
		self.midi_note_ch_0_val_9 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 9, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_9.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_9.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_9.pre_val = -1
		self.midi_note_ch_0_val_9.cur_val = -1
		self.midi_note_ch_0_val_9.led_fb_str = "midi_note_ch_0_val_9"
		self.midi_note_ch_0_val_10 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 10, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_10.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_10.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_10.pre_val = -1
		self.midi_note_ch_0_val_10.cur_val = -1
		self.midi_note_ch_0_val_10.led_fb_str = "midi_note_ch_0_val_10"
		self.midi_note_ch_0_val_11 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 11, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_11.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_11.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_11.pre_val = -1
		self.midi_note_ch_0_val_11.cur_val = -1
		self.midi_note_ch_0_val_11.led_fb_str = "midi_note_ch_0_val_11"
		self.midi_note_ch_0_val_12 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 12, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_12.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_12.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_12.pre_val = -1
		self.midi_note_ch_0_val_12.cur_val = -1
		self.midi_note_ch_0_val_12.led_fb_str = "midi_note_ch_0_val_12"
		self.midi_note_ch_0_val_13 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 13, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_13.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_13.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_13.pre_val = -1
		self.midi_note_ch_0_val_13.cur_val = -1
		self.midi_note_ch_0_val_13.led_fb_str = "midi_note_ch_0_val_13"
		self.midi_note_ch_0_val_14 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 14, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_14.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_14.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_14.pre_val = -1
		self.midi_note_ch_0_val_14.cur_val = -1
		self.midi_note_ch_0_val_14.led_fb_str = "midi_note_ch_0_val_14"
		self.midi_note_ch_0_val_15 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 15, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_15.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_15.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_15.pre_val = -1
		self.midi_note_ch_0_val_15.cur_val = -1
		self.midi_note_ch_0_val_15.led_fb_str = "midi_note_ch_0_val_15"
		self.midi_note_ch_0_val_0 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 0, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_0.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_0.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_0.pre_val = -1
		self.midi_note_ch_0_val_0.cur_val = -1
		self.midi_note_ch_0_val_0.led_fb_str = "midi_note_ch_0_val_0"
		self.midi_note_ch_0_val_1 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 1, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_1.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_1.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_1.pre_val = -1
		self.midi_note_ch_0_val_1.cur_val = -1
		self.midi_note_ch_0_val_1.led_fb_str = "midi_note_ch_0_val_1"
		self.midi_note_ch_0_val_2 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 2, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_2.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_2.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_2.pre_val = -1
		self.midi_note_ch_0_val_2.cur_val = -1
		self.midi_note_ch_0_val_2.led_fb_str = "midi_note_ch_0_val_2"
		self.midi_note_ch_0_val_3 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 3, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_3.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_3.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_3.pre_val = -1
		self.midi_note_ch_0_val_3.cur_val = -1
		self.midi_note_ch_0_val_3.led_fb_str = "midi_note_ch_0_val_3"
		self.midi_note_ch_0_val_4 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 4, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_4.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_4.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_4.pre_val = -1
		self.midi_note_ch_0_val_4.cur_val = -1
		self.midi_note_ch_0_val_4.led_fb_str = "midi_note_ch_0_val_4"
		self.midi_note_ch_0_val_5 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 5, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_5.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_5.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_5.pre_val = -1
		self.midi_note_ch_0_val_5.cur_val = -1
		self.midi_note_ch_0_val_5.led_fb_str = "midi_note_ch_0_val_5"
		self.midi_note_ch_0_val_6 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 6, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_6.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_6.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_6.pre_val = -1
		self.midi_note_ch_0_val_6.cur_val = -1
		self.midi_note_ch_0_val_6.led_fb_str = "midi_note_ch_0_val_6"
		self.midi_note_ch_0_val_7 = CustomConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 7, css_send_midi_fn=self.css_send_midi, log_message_fn=self.log_message)
		self.midi_note_ch_0_val_7.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_7.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_7.pre_val = -1
		self.midi_note_ch_0_val_7.cur_val = -1
		self.midi_note_ch_0_val_7.led_fb_str = "midi_note_ch_0_val_7"
	def _mode1(self):
		if(hasattr(self, 'global_mode') and str(self.global_mode[0]) != '1'): threading.Timer(0.8, self.show_message, args=('Activated mode: shift',)).start()
		num_tracks = 8
		num_scenes = 6
		track_offset = self.current_track_offset
		scene_offset = self.current_scene_offset
		combination_mode = "off"
		feedbackArr = {}
		feedbackArr["ClipRecording"] = None
		feedbackArr["ClipStarted"] = None
		feedbackArr["ClipStopped"] = None
		feedbackArr["ClipTriggeredPlay"] = None
		feedbackArr["ClipTriggeredRecord"] = None
		feedbackArr["NoScene"] = None
		feedbackArr["RecordButton"] = None
		feedbackArr["Scene"] = None
		feedbackArr["SceneTriggered"] = None
		feedbackArr["StopAllOff"] = None
		feedbackArr["StopAllOn"] = None
		feedbackArr["StopClip"] = None
		feedbackArr["StopClipTriggered"] = None
		feedbackArr["StopTrackPlaying"] = None
		feedbackArr["StopTrackStopped"] = None
		clips = [self.midi_note_ch_0_val_56, self.midi_note_ch_0_val_57, self.midi_note_ch_0_val_58, self.midi_note_ch_0_val_59, self.midi_note_ch_0_val_60, self.midi_note_ch_0_val_61, self.midi_note_ch_0_val_62, self.midi_note_ch_0_val_63, self.midi_note_ch_0_val_48, self.midi_note_ch_0_val_49, self.midi_note_ch_0_val_50, self.midi_note_ch_0_val_51, self.midi_note_ch_0_val_52, self.midi_note_ch_0_val_53, self.midi_note_ch_0_val_54, self.midi_note_ch_0_val_55, self.midi_note_ch_0_val_40, self.midi_note_ch_0_val_41, self.midi_note_ch_0_val_42, self.midi_note_ch_0_val_43, self.midi_note_ch_0_val_44, self.midi_note_ch_0_val_45, self.midi_note_ch_0_val_46, self.midi_note_ch_0_val_47, self.midi_note_ch_0_val_32, self.midi_note_ch_0_val_33, self.midi_note_ch_0_val_34, self.midi_note_ch_0_val_35, self.midi_note_ch_0_val_36, self.midi_note_ch_0_val_37, self.midi_note_ch_0_val_38, self.midi_note_ch_0_val_39, self.midi_note_ch_0_val_24, self.midi_note_ch_0_val_25, self.midi_note_ch_0_val_26, self.midi_note_ch_0_val_27, self.midi_note_ch_0_val_28, self.midi_note_ch_0_val_29, self.midi_note_ch_0_val_30, self.midi_note_ch_0_val_31, self.midi_note_ch_0_val_16, self.midi_note_ch_0_val_17, self.midi_note_ch_0_val_18, self.midi_note_ch_0_val_19, self.midi_note_ch_0_val_20, self.midi_note_ch_0_val_21, self.midi_note_ch_0_val_22, self.midi_note_ch_0_val_23]
		stop_all = self.midi_note_ch_0_val_89
		stop_tracks = [self.midi_note_ch_0_val_0, self.midi_note_ch_0_val_1, self.midi_note_ch_0_val_2, self.midi_note_ch_0_val_3, self.midi_note_ch_0_val_4, self.midi_note_ch_0_val_5, self.midi_note_ch_0_val_6, self.midi_note_ch_0_val_7]
		scene_launch = [self.midi_note_ch_0_val_82, self.midi_note_ch_0_val_83, self.midi_note_ch_0_val_84, self.midi_note_ch_0_val_85, self.midi_note_ch_0_val_86, self.midi_note_ch_0_val_87]
		self.session_box(num_tracks, num_scenes, track_offset, scene_offset, clips, stop_all, stop_tracks, scene_launch, feedbackArr, combination_mode)
		self.generate_relative_tracks_dict()
		self.midi_note_ch_0_val_8.add_value_listener(self.midi_note_ch_0_val_8_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_9.add_value_listener(self.midi_note_ch_0_val_9_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_10.add_value_listener(self.midi_note_ch_0_val_10_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_11.add_value_listener(self.midi_note_ch_0_val_11_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_12.add_value_listener(self.midi_note_ch_0_val_12_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_13.add_value_listener(self.midi_note_ch_0_val_13_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_14.add_value_listener(self.midi_note_ch_0_val_14_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_15.add_value_listener(self.midi_note_ch_0_val_15_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_88.add_value_listener(self.midi_note_ch_0_val_88_mode1_listener,identify_sender= False)
		self.midi_cc_ch_0_val_56.add_value_listener(self.midi_cc_ch_0_val_56_mode1_listener,identify_sender= False)
		self.midi_cc_ch_0_val_48.add_value_listener(self.midi_cc_ch_0_val_48_mode1_listener,identify_sender= False)
		self.midi_cc_ch_0_val_49.add_value_listener(self.midi_cc_ch_0_val_49_mode1_listener,identify_sender= False)
		self.midi_cc_ch_0_val_50.add_value_listener(self.midi_cc_ch_0_val_50_mode1_listener,identify_sender= False)
		self.midi_cc_ch_0_val_51.add_value_listener(self.midi_cc_ch_0_val_51_mode1_listener,identify_sender= False)
		self.midi_cc_ch_0_val_52.add_value_listener(self.midi_cc_ch_0_val_52_mode1_listener,identify_sender= False)
		self.midi_cc_ch_0_val_53.add_value_listener(self.midi_cc_ch_0_val_53_mode1_listener,identify_sender= False)
		self.midi_cc_ch_0_val_54.add_value_listener(self.midi_cc_ch_0_val_54_mode1_listener,identify_sender= False)
		self.midi_cc_ch_0_val_55.add_value_listener(self.midi_cc_ch_0_val_55_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_64.add_value_listener(self.midi_note_ch_0_val_64_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_65.add_value_listener(self.midi_note_ch_0_val_65_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_66.add_value_listener(self.midi_note_ch_0_val_66_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_67.add_value_listener(self.midi_note_ch_0_val_67_mode1_listener,identify_sender= False)
		self._mode1_configs()
		self._mode1_led_listeners()
	def _remove_mode1(self):
		self.show_message('Removed mode: shift')
		self.turn_inputs_off()
		combination_mode = "off"
		self.remove_session_box(combination_mode)
		self.midi_note_ch_0_val_8.remove_value_listener(self.midi_note_ch_0_val_8_mode1_listener)
		self.midi_note_ch_0_val_9.remove_value_listener(self.midi_note_ch_0_val_9_mode1_listener)
		self.midi_note_ch_0_val_10.remove_value_listener(self.midi_note_ch_0_val_10_mode1_listener)
		self.midi_note_ch_0_val_11.remove_value_listener(self.midi_note_ch_0_val_11_mode1_listener)
		self.midi_note_ch_0_val_12.remove_value_listener(self.midi_note_ch_0_val_12_mode1_listener)
		self.midi_note_ch_0_val_13.remove_value_listener(self.midi_note_ch_0_val_13_mode1_listener)
		self.midi_note_ch_0_val_14.remove_value_listener(self.midi_note_ch_0_val_14_mode1_listener)
		self.midi_note_ch_0_val_15.remove_value_listener(self.midi_note_ch_0_val_15_mode1_listener)
		self.midi_note_ch_0_val_88.remove_value_listener(self.midi_note_ch_0_val_88_mode1_listener)
		self.midi_cc_ch_0_val_56.remove_value_listener(self.midi_cc_ch_0_val_56_mode1_listener)
		self.midi_cc_ch_0_val_48.remove_value_listener(self.midi_cc_ch_0_val_48_mode1_listener)
		self.midi_cc_ch_0_val_49.remove_value_listener(self.midi_cc_ch_0_val_49_mode1_listener)
		self.midi_cc_ch_0_val_50.remove_value_listener(self.midi_cc_ch_0_val_50_mode1_listener)
		self.midi_cc_ch_0_val_51.remove_value_listener(self.midi_cc_ch_0_val_51_mode1_listener)
		self.midi_cc_ch_0_val_52.remove_value_listener(self.midi_cc_ch_0_val_52_mode1_listener)
		self.midi_cc_ch_0_val_53.remove_value_listener(self.midi_cc_ch_0_val_53_mode1_listener)
		self.midi_cc_ch_0_val_54.remove_value_listener(self.midi_cc_ch_0_val_54_mode1_listener)
		self.midi_cc_ch_0_val_55.remove_value_listener(self.midi_cc_ch_0_val_55_mode1_listener)
		self.midi_note_ch_0_val_64.remove_value_listener(self.midi_note_ch_0_val_64_mode1_listener)
		self.midi_note_ch_0_val_65.remove_value_listener(self.midi_note_ch_0_val_65_mode1_listener)
		self.midi_note_ch_0_val_66.remove_value_listener(self.midi_note_ch_0_val_66_mode1_listener)
		self.midi_note_ch_0_val_67.remove_value_listener(self.midi_note_ch_0_val_67_mode1_listener)
		self._remove_mode1_led_listeners()
	def midi_note_ch_0_val_8_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_note_ch_0_val_8.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_8, "pre_val"):
			self.midi_note_ch_0_val_8.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_8, "prev_press_time"):
			self.midi_note_ch_0_val_8.prev_press_time = time.time()
		self.pick_brain(self.new_onoff_mapping_id_78)
		self.midi_note_ch_0_val_8.pre_val = value
		self.midi_note_ch_0_val_8.prev_press_time = time.time()
	def midi_note_ch_0_val_9_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_note_ch_0_val_9.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_9, "pre_val"):
			self.midi_note_ch_0_val_9.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_9, "prev_press_time"):
			self.midi_note_ch_0_val_9.prev_press_time = time.time()
		self.pick_brain(self.new_onoff_mapping_copy_85_id_85)
		self.midi_note_ch_0_val_9.pre_val = value
		self.midi_note_ch_0_val_9.prev_press_time = time.time()
	def midi_note_ch_0_val_10_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_note_ch_0_val_10.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_10, "pre_val"):
			self.midi_note_ch_0_val_10.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_10, "prev_press_time"):
			self.midi_note_ch_0_val_10.prev_press_time = time.time()
		self.pick_brain(self.new_onoff_mapping_copy_84_id_84)
		self.midi_note_ch_0_val_10.pre_val = value
		self.midi_note_ch_0_val_10.prev_press_time = time.time()
	def midi_note_ch_0_val_11_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_note_ch_0_val_11.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_11, "pre_val"):
			self.midi_note_ch_0_val_11.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_11, "prev_press_time"):
			self.midi_note_ch_0_val_11.prev_press_time = time.time()
		self.pick_brain(self.new_onoff_mapping_copy_83_id_83)
		self.midi_note_ch_0_val_11.pre_val = value
		self.midi_note_ch_0_val_11.prev_press_time = time.time()
	def midi_note_ch_0_val_12_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_note_ch_0_val_12.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_12, "pre_val"):
			self.midi_note_ch_0_val_12.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_12, "prev_press_time"):
			self.midi_note_ch_0_val_12.prev_press_time = time.time()
		self.pick_brain(self.new_onoff_mapping_copy_82_id_82)
		self.midi_note_ch_0_val_12.pre_val = value
		self.midi_note_ch_0_val_12.prev_press_time = time.time()
	def midi_note_ch_0_val_13_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_note_ch_0_val_13.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_13, "pre_val"):
			self.midi_note_ch_0_val_13.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_13, "prev_press_time"):
			self.midi_note_ch_0_val_13.prev_press_time = time.time()
		self.pick_brain(self.new_onoff_mapping_copy_81_id_81)
		self.midi_note_ch_0_val_13.pre_val = value
		self.midi_note_ch_0_val_13.prev_press_time = time.time()
	def midi_note_ch_0_val_14_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_note_ch_0_val_14.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_14, "pre_val"):
			self.midi_note_ch_0_val_14.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_14, "prev_press_time"):
			self.midi_note_ch_0_val_14.prev_press_time = time.time()
		self.pick_brain(self.new_onoff_mapping_copy_80_id_80)
		self.midi_note_ch_0_val_14.pre_val = value
		self.midi_note_ch_0_val_14.prev_press_time = time.time()
	def midi_note_ch_0_val_15_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_note_ch_0_val_15.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_15, "pre_val"):
			self.midi_note_ch_0_val_15.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_15, "prev_press_time"):
			self.midi_note_ch_0_val_15.prev_press_time = time.time()
		self.pick_brain(self.new_onoff_mapping_copy_79_id_79)
		self.midi_note_ch_0_val_15.pre_val = value
		self.midi_note_ch_0_val_15.prev_press_time = time.time()
	def midi_note_ch_0_val_88_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_note_ch_0_val_88.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_88, "pre_val"):
			self.midi_note_ch_0_val_88.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_88, "prev_press_time"):
			self.midi_note_ch_0_val_88.prev_press_time = time.time()
		self.pick_brain(self.new_onoff_mapping_copy_79_copy_86_id_86)
		self.midi_note_ch_0_val_88.pre_val = value
		self.midi_note_ch_0_val_88.prev_press_time = time.time()
	def midi_cc_ch_0_val_56_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_cc_ch_0_val_56.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_56, "pre_val"):
			self.midi_cc_ch_0_val_56.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_56, "prev_press_time"):
			self.midi_cc_ch_0_val_56.prev_press_time = time.time()
		self.pick_brain(self.new_volume_mapping_copy_56_copy_74_id_74)
		self.midi_cc_ch_0_val_56.pre_val = value
		self.midi_cc_ch_0_val_56.prev_press_time = time.time()
	def midi_cc_ch_0_val_48_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_cc_ch_0_val_48.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_48, "pre_val"):
			self.midi_cc_ch_0_val_48.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_48, "prev_press_time"):
			self.midi_cc_ch_0_val_48.prev_press_time = time.time()
		self.pick_brain(self.new_volume_mapping_copy_32_copy_77_id_77)
		self.midi_cc_ch_0_val_48.pre_val = value
		self.midi_cc_ch_0_val_48.prev_press_time = time.time()
	def midi_cc_ch_0_val_49_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_cc_ch_0_val_49.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_49, "pre_val"):
			self.midi_cc_ch_0_val_49.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_49, "prev_press_time"):
			self.midi_cc_ch_0_val_49.prev_press_time = time.time()
		self.pick_brain(self.new_volume_mapping_copy_25_copy_33_id_33)
		self.midi_cc_ch_0_val_49.pre_val = value
		self.midi_cc_ch_0_val_49.prev_press_time = time.time()
	def midi_cc_ch_0_val_50_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_cc_ch_0_val_50.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_50, "pre_val"):
			self.midi_cc_ch_0_val_50.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_50, "prev_press_time"):
			self.midi_cc_ch_0_val_50.prev_press_time = time.time()
		self.pick_brain(self.new_volume_mapping_copy_25_copy_26_copy_34_id_34)
		self.midi_cc_ch_0_val_50.pre_val = value
		self.midi_cc_ch_0_val_50.prev_press_time = time.time()
	def midi_cc_ch_0_val_51_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_cc_ch_0_val_51.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_51, "pre_val"):
			self.midi_cc_ch_0_val_51.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_51, "prev_press_time"):
			self.midi_cc_ch_0_val_51.prev_press_time = time.time()
		self.pick_brain(self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35)
		self.midi_cc_ch_0_val_51.pre_val = value
		self.midi_cc_ch_0_val_51.prev_press_time = time.time()
	def midi_cc_ch_0_val_52_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_cc_ch_0_val_52.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_52, "pre_val"):
			self.midi_cc_ch_0_val_52.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_52, "prev_press_time"):
			self.midi_cc_ch_0_val_52.prev_press_time = time.time()
		self.pick_brain(self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36)
		self.midi_cc_ch_0_val_52.pre_val = value
		self.midi_cc_ch_0_val_52.prev_press_time = time.time()
	def midi_cc_ch_0_val_53_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_cc_ch_0_val_53.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_53, "pre_val"):
			self.midi_cc_ch_0_val_53.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_53, "prev_press_time"):
			self.midi_cc_ch_0_val_53.prev_press_time = time.time()
		self.pick_brain(self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37)
		self.midi_cc_ch_0_val_53.pre_val = value
		self.midi_cc_ch_0_val_53.prev_press_time = time.time()
	def midi_cc_ch_0_val_54_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_cc_ch_0_val_54.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_54, "pre_val"):
			self.midi_cc_ch_0_val_54.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_54, "prev_press_time"):
			self.midi_cc_ch_0_val_54.prev_press_time = time.time()
		self.pick_brain(self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38)
		self.midi_cc_ch_0_val_54.pre_val = value
		self.midi_cc_ch_0_val_54.prev_press_time = time.time()
	def midi_cc_ch_0_val_55_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_cc_ch_0_val_55.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_55, "pre_val"):
			self.midi_cc_ch_0_val_55.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_55, "prev_press_time"):
			self.midi_cc_ch_0_val_55.prev_press_time = time.time()
		self.pick_brain(self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39)
		self.midi_cc_ch_0_val_55.pre_val = value
		self.midi_cc_ch_0_val_55.prev_press_time = time.time()
	def midi_note_ch_0_val_64_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_note_ch_0_val_64.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_64, "pre_val"):
			self.midi_note_ch_0_val_64.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_64, "prev_press_time"):
			self.midi_note_ch_0_val_64.prev_press_time = time.time()
		self.pick_brain(self.new_session_box_navigation_mapping_id_14)
		self.midi_note_ch_0_val_64.pre_val = value
		self.midi_note_ch_0_val_64.prev_press_time = time.time()
	def midi_note_ch_0_val_65_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_note_ch_0_val_65.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_65, "pre_val"):
			self.midi_note_ch_0_val_65.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_65, "prev_press_time"):
			self.midi_note_ch_0_val_65.prev_press_time = time.time()
		self.pick_brain(self.new_session_box_navigation_mapping_copy_15_id_15)
		self.midi_note_ch_0_val_65.pre_val = value
		self.midi_note_ch_0_val_65.prev_press_time = time.time()
	def midi_note_ch_0_val_66_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_note_ch_0_val_66.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_66, "pre_val"):
			self.midi_note_ch_0_val_66.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_66, "prev_press_time"):
			self.midi_note_ch_0_val_66.prev_press_time = time.time()
		self.pick_brain(self.new_session_box_navigation_mapping_copy_15_copy_16_id_16)
		self.midi_note_ch_0_val_66.pre_val = value
		self.midi_note_ch_0_val_66.prev_press_time = time.time()
	def midi_note_ch_0_val_67_mode1_listener(self, value):
		method_name = inspect.currentframe().f_code.co_name
		self.midi_note_ch_0_val_67.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_67, "pre_val"):
			self.midi_note_ch_0_val_67.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_67, "prev_press_time"):
			self.midi_note_ch_0_val_67.prev_press_time = time.time()
		self.pick_brain(self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17)
		self.midi_note_ch_0_val_67.pre_val = value
		self.midi_note_ch_0_val_67.prev_press_time = time.time()
	def _mode1_configs(self):
		self.mode_1_configs_map = [
			"new_onoff_mapping_id_78",
			"new_onoff_mapping_copy_85_id_85",
			"new_onoff_mapping_copy_84_id_84",
			"new_onoff_mapping_copy_83_id_83",
			"new_onoff_mapping_copy_82_id_82",
			"new_onoff_mapping_copy_81_id_81",
			"new_onoff_mapping_copy_80_id_80",
			"new_onoff_mapping_copy_79_id_79",
			"new_onoff_mapping_copy_79_copy_86_id_86",
			"new_volume_mapping_copy_56_copy_74_id_74",
			"new_volume_mapping_copy_32_copy_77_id_77",
			"new_volume_mapping_copy_25_copy_33_id_33",
			"new_volume_mapping_copy_25_copy_26_copy_34_id_34",
			"new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35",
			"new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36",
			"new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37",
			"new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38",
			"new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39",
			"new_session_box_navigation_mapping_id_14",
			"new_session_box_navigation_mapping_copy_15_id_15",
			"new_session_box_navigation_mapping_copy_15_copy_16_id_16",
			"new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17"]
		self.new_onoff_mapping_id_78 = {}
		self.new_onoff_mapping_id_78["attached_to"] = "midi_note_ch_0_val_8"
		self.new_onoff_mapping_id_78["track"] = self.track_num(2)
		self.new_onoff_mapping_id_78["module"] = "self.c_mod(\"self.relative_tracks_dict[0]\", \".devices[0]\", \".parameters[0]\", \"\")"
		self.new_onoff_mapping_id_78["minimum"] = 0.0
		self.new_onoff_mapping_id_78["maximum"] = 1.0
		self.new_onoff_mapping_id_78["snap_to"] = 1
		self.new_onoff_mapping_id_78["element"] = "value"
		self.new_onoff_mapping_id_78["output_type"] = "val"
		self.new_onoff_mapping_id_78["ui_listener"] = "value"
		self.new_onoff_mapping_id_78["feedback_brain"] = "feedback_on_off"
		self.new_onoff_mapping_id_78["ctrl_type"] = "on/off"
		self.new_onoff_mapping_id_78["on_condition"] = "isEqualTo"
		self.new_onoff_mapping_id_78["enc_first"] = 127
		self.new_onoff_mapping_id_78["off_condition"] = "isEqualTo"
		self.new_onoff_mapping_id_78["enc_second"] = 0
		self.new_onoff_mapping_id_78["switch_type"] = "momentary"
		self.new_onoff_mapping_id_78["LED_mapping_type_needs_feedback"] = "1"
		self.new_onoff_mapping_id_78["LED_feedback"] = "default"
		self.new_onoff_mapping_id_78["LED_feedback_active"] = "1"
		self.new_onoff_mapping_id_78["LED_on"] = "127"
		self.new_onoff_mapping_id_78["LED_off"] = "0"
		self.new_onoff_mapping_id_78["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_8"]
		self.new_onoff_mapping_id_78["json_id"] = 78
		self.new_onoff_mapping_id_78["mapping_name"] = "New On/Off mapping "
		self.new_onoff_mapping_id_78["mapping_type"] = "On/Off"
		self.new_onoff_mapping_copy_85_id_85 = {}
		self.new_onoff_mapping_copy_85_id_85["attached_to"] = "midi_note_ch_0_val_9"
		self.new_onoff_mapping_copy_85_id_85["track"] = self.track_num(2)
		self.new_onoff_mapping_copy_85_id_85["module"] = "self.c_mod(\"self.relative_tracks_dict[1]\", \".devices[0]\", \".parameters[0]\", \"\")"
		self.new_onoff_mapping_copy_85_id_85["minimum"] = 0.0
		self.new_onoff_mapping_copy_85_id_85["maximum"] = 1.0
		self.new_onoff_mapping_copy_85_id_85["snap_to"] = 1
		self.new_onoff_mapping_copy_85_id_85["element"] = "value"
		self.new_onoff_mapping_copy_85_id_85["output_type"] = "val"
		self.new_onoff_mapping_copy_85_id_85["ui_listener"] = "value"
		self.new_onoff_mapping_copy_85_id_85["feedback_brain"] = "feedback_on_off"
		self.new_onoff_mapping_copy_85_id_85["ctrl_type"] = "on/off"
		self.new_onoff_mapping_copy_85_id_85["on_condition"] = "isEqualTo"
		self.new_onoff_mapping_copy_85_id_85["enc_first"] = 127
		self.new_onoff_mapping_copy_85_id_85["off_condition"] = "isEqualTo"
		self.new_onoff_mapping_copy_85_id_85["enc_second"] = 0
		self.new_onoff_mapping_copy_85_id_85["switch_type"] = "momentary"
		self.new_onoff_mapping_copy_85_id_85["LED_mapping_type_needs_feedback"] = "1"
		self.new_onoff_mapping_copy_85_id_85["LED_feedback"] = "default"
		self.new_onoff_mapping_copy_85_id_85["LED_feedback_active"] = "1"
		self.new_onoff_mapping_copy_85_id_85["LED_on"] = "127"
		self.new_onoff_mapping_copy_85_id_85["LED_off"] = "0"
		self.new_onoff_mapping_copy_85_id_85["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_9"]
		self.new_onoff_mapping_copy_85_id_85["json_id"] = 85
		self.new_onoff_mapping_copy_85_id_85["mapping_name"] = "New On/Off mapping  copy 85"
		self.new_onoff_mapping_copy_85_id_85["mapping_type"] = "On/Off"
		self.new_onoff_mapping_copy_84_id_84 = {}
		self.new_onoff_mapping_copy_84_id_84["attached_to"] = "midi_note_ch_0_val_10"
		self.new_onoff_mapping_copy_84_id_84["track"] = self.track_num(2)
		self.new_onoff_mapping_copy_84_id_84["module"] = "self.c_mod(\"self.relative_tracks_dict[2]\", \".devices[0]\", \".parameters[0]\", \"\")"
		self.new_onoff_mapping_copy_84_id_84["minimum"] = 0.0
		self.new_onoff_mapping_copy_84_id_84["maximum"] = 1.0
		self.new_onoff_mapping_copy_84_id_84["snap_to"] = 1
		self.new_onoff_mapping_copy_84_id_84["element"] = "value"
		self.new_onoff_mapping_copy_84_id_84["output_type"] = "val"
		self.new_onoff_mapping_copy_84_id_84["ui_listener"] = "value"
		self.new_onoff_mapping_copy_84_id_84["feedback_brain"] = "feedback_on_off"
		self.new_onoff_mapping_copy_84_id_84["ctrl_type"] = "on/off"
		self.new_onoff_mapping_copy_84_id_84["on_condition"] = "isEqualTo"
		self.new_onoff_mapping_copy_84_id_84["enc_first"] = 127
		self.new_onoff_mapping_copy_84_id_84["off_condition"] = "isEqualTo"
		self.new_onoff_mapping_copy_84_id_84["enc_second"] = 0
		self.new_onoff_mapping_copy_84_id_84["switch_type"] = "momentary"
		self.new_onoff_mapping_copy_84_id_84["LED_mapping_type_needs_feedback"] = "1"
		self.new_onoff_mapping_copy_84_id_84["LED_feedback"] = "default"
		self.new_onoff_mapping_copy_84_id_84["LED_feedback_active"] = "1"
		self.new_onoff_mapping_copy_84_id_84["LED_on"] = "127"
		self.new_onoff_mapping_copy_84_id_84["LED_off"] = "0"
		self.new_onoff_mapping_copy_84_id_84["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_10"]
		self.new_onoff_mapping_copy_84_id_84["json_id"] = 84
		self.new_onoff_mapping_copy_84_id_84["mapping_name"] = "New On/Off mapping  copy 84"
		self.new_onoff_mapping_copy_84_id_84["mapping_type"] = "On/Off"
		self.new_onoff_mapping_copy_83_id_83 = {}
		self.new_onoff_mapping_copy_83_id_83["attached_to"] = "midi_note_ch_0_val_11"
		self.new_onoff_mapping_copy_83_id_83["track"] = self.track_num(2)
		self.new_onoff_mapping_copy_83_id_83["module"] = "self.c_mod(\"self.relative_tracks_dict[3]\", \".devices[0]\", \".parameters[0]\", \"\")"
		self.new_onoff_mapping_copy_83_id_83["minimum"] = 0.0
		self.new_onoff_mapping_copy_83_id_83["maximum"] = 1.0
		self.new_onoff_mapping_copy_83_id_83["snap_to"] = 1
		self.new_onoff_mapping_copy_83_id_83["element"] = "value"
		self.new_onoff_mapping_copy_83_id_83["output_type"] = "val"
		self.new_onoff_mapping_copy_83_id_83["ui_listener"] = "value"
		self.new_onoff_mapping_copy_83_id_83["feedback_brain"] = "feedback_on_off"
		self.new_onoff_mapping_copy_83_id_83["ctrl_type"] = "on/off"
		self.new_onoff_mapping_copy_83_id_83["on_condition"] = "isEqualTo"
		self.new_onoff_mapping_copy_83_id_83["enc_first"] = 127
		self.new_onoff_mapping_copy_83_id_83["off_condition"] = "isEqualTo"
		self.new_onoff_mapping_copy_83_id_83["enc_second"] = 0
		self.new_onoff_mapping_copy_83_id_83["switch_type"] = "momentary"
		self.new_onoff_mapping_copy_83_id_83["LED_mapping_type_needs_feedback"] = "1"
		self.new_onoff_mapping_copy_83_id_83["LED_feedback"] = "default"
		self.new_onoff_mapping_copy_83_id_83["LED_feedback_active"] = "1"
		self.new_onoff_mapping_copy_83_id_83["LED_on"] = "127"
		self.new_onoff_mapping_copy_83_id_83["LED_off"] = "0"
		self.new_onoff_mapping_copy_83_id_83["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_11"]
		self.new_onoff_mapping_copy_83_id_83["json_id"] = 83
		self.new_onoff_mapping_copy_83_id_83["mapping_name"] = "New On/Off mapping  copy 83"
		self.new_onoff_mapping_copy_83_id_83["mapping_type"] = "On/Off"
		self.new_onoff_mapping_copy_82_id_82 = {}
		self.new_onoff_mapping_copy_82_id_82["attached_to"] = "midi_note_ch_0_val_12"
		self.new_onoff_mapping_copy_82_id_82["track"] = self.track_num(2)
		self.new_onoff_mapping_copy_82_id_82["module"] = "self.c_mod(\"self.relative_tracks_dict[4]\", \".devices[0]\", \".parameters[0]\", \"\")"
		self.new_onoff_mapping_copy_82_id_82["minimum"] = 0.0
		self.new_onoff_mapping_copy_82_id_82["maximum"] = 1.0
		self.new_onoff_mapping_copy_82_id_82["snap_to"] = 1
		self.new_onoff_mapping_copy_82_id_82["element"] = "value"
		self.new_onoff_mapping_copy_82_id_82["output_type"] = "val"
		self.new_onoff_mapping_copy_82_id_82["ui_listener"] = "value"
		self.new_onoff_mapping_copy_82_id_82["feedback_brain"] = "feedback_on_off"
		self.new_onoff_mapping_copy_82_id_82["ctrl_type"] = "on/off"
		self.new_onoff_mapping_copy_82_id_82["on_condition"] = "isEqualTo"
		self.new_onoff_mapping_copy_82_id_82["enc_first"] = 127
		self.new_onoff_mapping_copy_82_id_82["off_condition"] = "isEqualTo"
		self.new_onoff_mapping_copy_82_id_82["enc_second"] = 0
		self.new_onoff_mapping_copy_82_id_82["switch_type"] = "momentary"
		self.new_onoff_mapping_copy_82_id_82["LED_mapping_type_needs_feedback"] = "1"
		self.new_onoff_mapping_copy_82_id_82["LED_feedback"] = "default"
		self.new_onoff_mapping_copy_82_id_82["LED_feedback_active"] = "1"
		self.new_onoff_mapping_copy_82_id_82["LED_on"] = "127"
		self.new_onoff_mapping_copy_82_id_82["LED_off"] = "0"
		self.new_onoff_mapping_copy_82_id_82["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_12"]
		self.new_onoff_mapping_copy_82_id_82["json_id"] = 82
		self.new_onoff_mapping_copy_82_id_82["mapping_name"] = "New On/Off mapping  copy 82"
		self.new_onoff_mapping_copy_82_id_82["mapping_type"] = "On/Off"
		self.new_onoff_mapping_copy_81_id_81 = {}
		self.new_onoff_mapping_copy_81_id_81["attached_to"] = "midi_note_ch_0_val_13"
		self.new_onoff_mapping_copy_81_id_81["track"] = self.track_num(2)
		self.new_onoff_mapping_copy_81_id_81["module"] = "self.c_mod(\"self.relative_tracks_dict[5]\", \".devices[0]\", \".parameters[0]\", \"\")"
		self.new_onoff_mapping_copy_81_id_81["minimum"] = 0.0
		self.new_onoff_mapping_copy_81_id_81["maximum"] = 1.0
		self.new_onoff_mapping_copy_81_id_81["snap_to"] = 1
		self.new_onoff_mapping_copy_81_id_81["element"] = "value"
		self.new_onoff_mapping_copy_81_id_81["output_type"] = "val"
		self.new_onoff_mapping_copy_81_id_81["ui_listener"] = "value"
		self.new_onoff_mapping_copy_81_id_81["feedback_brain"] = "feedback_on_off"
		self.new_onoff_mapping_copy_81_id_81["ctrl_type"] = "on/off"
		self.new_onoff_mapping_copy_81_id_81["on_condition"] = "isEqualTo"
		self.new_onoff_mapping_copy_81_id_81["enc_first"] = 127
		self.new_onoff_mapping_copy_81_id_81["off_condition"] = "isEqualTo"
		self.new_onoff_mapping_copy_81_id_81["enc_second"] = 0
		self.new_onoff_mapping_copy_81_id_81["switch_type"] = "momentary"
		self.new_onoff_mapping_copy_81_id_81["LED_mapping_type_needs_feedback"] = "1"
		self.new_onoff_mapping_copy_81_id_81["LED_feedback"] = "default"
		self.new_onoff_mapping_copy_81_id_81["LED_feedback_active"] = "1"
		self.new_onoff_mapping_copy_81_id_81["LED_on"] = "127"
		self.new_onoff_mapping_copy_81_id_81["LED_off"] = "0"
		self.new_onoff_mapping_copy_81_id_81["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_13"]
		self.new_onoff_mapping_copy_81_id_81["json_id"] = 81
		self.new_onoff_mapping_copy_81_id_81["mapping_name"] = "New On/Off mapping  copy 81"
		self.new_onoff_mapping_copy_81_id_81["mapping_type"] = "On/Off"
		self.new_onoff_mapping_copy_80_id_80 = {}
		self.new_onoff_mapping_copy_80_id_80["attached_to"] = "midi_note_ch_0_val_14"
		self.new_onoff_mapping_copy_80_id_80["track"] = self.track_num(2)
		self.new_onoff_mapping_copy_80_id_80["module"] = "self.c_mod(\"self.relative_tracks_dict[6]\", \".devices[0]\", \".parameters[0]\", \"\")"
		self.new_onoff_mapping_copy_80_id_80["minimum"] = 0.0
		self.new_onoff_mapping_copy_80_id_80["maximum"] = 1.0
		self.new_onoff_mapping_copy_80_id_80["snap_to"] = 1
		self.new_onoff_mapping_copy_80_id_80["element"] = "value"
		self.new_onoff_mapping_copy_80_id_80["output_type"] = "val"
		self.new_onoff_mapping_copy_80_id_80["ui_listener"] = "value"
		self.new_onoff_mapping_copy_80_id_80["feedback_brain"] = "feedback_on_off"
		self.new_onoff_mapping_copy_80_id_80["ctrl_type"] = "on/off"
		self.new_onoff_mapping_copy_80_id_80["on_condition"] = "isEqualTo"
		self.new_onoff_mapping_copy_80_id_80["enc_first"] = 127
		self.new_onoff_mapping_copy_80_id_80["off_condition"] = "isEqualTo"
		self.new_onoff_mapping_copy_80_id_80["enc_second"] = 0
		self.new_onoff_mapping_copy_80_id_80["switch_type"] = "momentary"
		self.new_onoff_mapping_copy_80_id_80["LED_mapping_type_needs_feedback"] = "1"
		self.new_onoff_mapping_copy_80_id_80["LED_feedback"] = "default"
		self.new_onoff_mapping_copy_80_id_80["LED_feedback_active"] = "1"
		self.new_onoff_mapping_copy_80_id_80["LED_on"] = "127"
		self.new_onoff_mapping_copy_80_id_80["LED_off"] = "0"
		self.new_onoff_mapping_copy_80_id_80["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_14"]
		self.new_onoff_mapping_copy_80_id_80["json_id"] = 80
		self.new_onoff_mapping_copy_80_id_80["mapping_name"] = "New On/Off mapping  copy 80"
		self.new_onoff_mapping_copy_80_id_80["mapping_type"] = "On/Off"
		self.new_onoff_mapping_copy_79_id_79 = {}
		self.new_onoff_mapping_copy_79_id_79["attached_to"] = "midi_note_ch_0_val_15"
		self.new_onoff_mapping_copy_79_id_79["track"] = self.track_num(2)
		self.new_onoff_mapping_copy_79_id_79["module"] = "self.c_mod(\"self.relative_tracks_dict[7]\", \".devices[0]\", \".parameters[0]\", \"\")"
		self.new_onoff_mapping_copy_79_id_79["minimum"] = 0.0
		self.new_onoff_mapping_copy_79_id_79["maximum"] = 1.0
		self.new_onoff_mapping_copy_79_id_79["snap_to"] = 1
		self.new_onoff_mapping_copy_79_id_79["element"] = "value"
		self.new_onoff_mapping_copy_79_id_79["output_type"] = "val"
		self.new_onoff_mapping_copy_79_id_79["ui_listener"] = "value"
		self.new_onoff_mapping_copy_79_id_79["feedback_brain"] = "feedback_on_off"
		self.new_onoff_mapping_copy_79_id_79["ctrl_type"] = "on/off"
		self.new_onoff_mapping_copy_79_id_79["on_condition"] = "isEqualTo"
		self.new_onoff_mapping_copy_79_id_79["enc_first"] = 127
		self.new_onoff_mapping_copy_79_id_79["off_condition"] = "isEqualTo"
		self.new_onoff_mapping_copy_79_id_79["enc_second"] = 0
		self.new_onoff_mapping_copy_79_id_79["switch_type"] = "momentary"
		self.new_onoff_mapping_copy_79_id_79["LED_mapping_type_needs_feedback"] = "1"
		self.new_onoff_mapping_copy_79_id_79["LED_feedback"] = "default"
		self.new_onoff_mapping_copy_79_id_79["LED_feedback_active"] = "1"
		self.new_onoff_mapping_copy_79_id_79["LED_on"] = "127"
		self.new_onoff_mapping_copy_79_id_79["LED_off"] = "0"
		self.new_onoff_mapping_copy_79_id_79["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_15"]
		self.new_onoff_mapping_copy_79_id_79["json_id"] = 79
		self.new_onoff_mapping_copy_79_id_79["mapping_name"] = "New On/Off mapping  copy 79"
		self.new_onoff_mapping_copy_79_id_79["mapping_type"] = "On/Off"
		self.new_onoff_mapping_copy_79_copy_86_id_86 = {}
		self.new_onoff_mapping_copy_79_copy_86_id_86["attached_to"] = "midi_note_ch_0_val_88"
		self.new_onoff_mapping_copy_79_copy_86_id_86["track"] = self.track_num(2)
		self.new_onoff_mapping_copy_79_copy_86_id_86["module"] = "self.c_mod(\"self.song().master_track\", \".devices[0]\", \".parameters[0]\", \"\")"
		self.new_onoff_mapping_copy_79_copy_86_id_86["minimum"] = 0.0
		self.new_onoff_mapping_copy_79_copy_86_id_86["maximum"] = 1.0
		self.new_onoff_mapping_copy_79_copy_86_id_86["snap_to"] = 1
		self.new_onoff_mapping_copy_79_copy_86_id_86["element"] = "value"
		self.new_onoff_mapping_copy_79_copy_86_id_86["output_type"] = "val"
		self.new_onoff_mapping_copy_79_copy_86_id_86["ui_listener"] = "value"
		self.new_onoff_mapping_copy_79_copy_86_id_86["feedback_brain"] = "feedback_on_off"
		self.new_onoff_mapping_copy_79_copy_86_id_86["on_condition"] = "isEqualTo"
		self.new_onoff_mapping_copy_79_copy_86_id_86["enc_first"] = 127
		self.new_onoff_mapping_copy_79_copy_86_id_86["off_condition"] = "isEqualTo"
		self.new_onoff_mapping_copy_79_copy_86_id_86["enc_second"] = 0
		self.new_onoff_mapping_copy_79_copy_86_id_86["switch_type"] = "momentary"
		self.new_onoff_mapping_copy_79_copy_86_id_86["ctrl_type"] = "on/off"
		self.new_onoff_mapping_copy_79_copy_86_id_86["LED_mapping_type_needs_feedback"] = "1"
		self.new_onoff_mapping_copy_79_copy_86_id_86["LED_feedback"] = "default"
		self.new_onoff_mapping_copy_79_copy_86_id_86["LED_feedback_active"] = "1"
		self.new_onoff_mapping_copy_79_copy_86_id_86["LED_on"] = "127"
		self.new_onoff_mapping_copy_79_copy_86_id_86["LED_off"] = "0"
		self.new_onoff_mapping_copy_79_copy_86_id_86["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_88"]
		self.new_onoff_mapping_copy_79_copy_86_id_86["json_id"] = 86
		self.new_onoff_mapping_copy_79_copy_86_id_86["mapping_name"] = "New On/Off mapping  copy 79 copy 86"
		self.new_onoff_mapping_copy_79_copy_86_id_86["mapping_type"] = "On/Off"
		self.new_volume_mapping_copy_56_copy_74_id_74 = {}
		self.new_volume_mapping_copy_56_copy_74_id_74["attached_to"] = "midi_cc_ch_0_val_56"
		self.new_volume_mapping_copy_56_copy_74_id_74["track"] = self.track_num(2)
		self.new_volume_mapping_copy_56_copy_74_id_74["module"] = "self.c_mod(\"self.song().master_track\", \"\", \".mixer_device.volume\", \"\")"
		self.new_volume_mapping_copy_56_copy_74_id_74["element"] = "value"
		self.new_volume_mapping_copy_56_copy_74_id_74["output_type"] = "val"
		self.new_volume_mapping_copy_56_copy_74_id_74["minimum"] = round(0,2)
		self.new_volume_mapping_copy_56_copy_74_id_74["maximum"] = round(85,2)
		self.new_volume_mapping_copy_56_copy_74_id_74["decimal_places"] = 2
		self.new_volume_mapping_copy_56_copy_74_id_74["ui_listener"] = "value"
		self.new_volume_mapping_copy_56_copy_74_id_74["feedback_brain"] = "feedback_range"
		self.new_volume_mapping_copy_56_copy_74_id_74["ctrl_type"] = "absolute"
		self.new_volume_mapping_copy_56_copy_74_id_74["takeover_mode"] = "None"
		self.new_volume_mapping_copy_56_copy_74_id_74["enc_first"] = 1
		self.new_volume_mapping_copy_56_copy_74_id_74["enc_second"] = 127
		self.new_volume_mapping_copy_56_copy_74_id_74["reverse_mode"] = False
		self.new_volume_mapping_copy_56_copy_74_id_74["LED_mapping_type_needs_feedback"] = "1"
		self.new_volume_mapping_copy_56_copy_74_id_74["LED_feedback"] = "default"
		self.new_volume_mapping_copy_56_copy_74_id_74["LED_feedback_active"] = "1"
		self.new_volume_mapping_copy_56_copy_74_id_74["LED_on"] = "127"
		self.new_volume_mapping_copy_56_copy_74_id_74["LED_off"] = "0"
		self.new_volume_mapping_copy_56_copy_74_id_74["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_56"]
		self.new_volume_mapping_copy_56_copy_74_id_74["snap_to"] = True
		self.new_volume_mapping_copy_56_copy_74_id_74["json_id"] = 74
		self.new_volume_mapping_copy_56_copy_74_id_74["mapping_name"] = "New Volume mapping  copy 56 copy 74"
		self.new_volume_mapping_copy_56_copy_74_id_74["mapping_type"] = "Volume"
		self.new_volume_mapping_copy_32_copy_77_id_77 = {}
		self.new_volume_mapping_copy_32_copy_77_id_77["attached_to"] = "midi_cc_ch_0_val_48"
		self.new_volume_mapping_copy_32_copy_77_id_77["track"] = self.track_num(2)
		self.new_volume_mapping_copy_32_copy_77_id_77["module"] = "self.c_mod(\"self.relative_tracks_dict[0]\", \"\", \".mixer_device.volume\", \"\")"
		self.new_volume_mapping_copy_32_copy_77_id_77["element"] = "value"
		self.new_volume_mapping_copy_32_copy_77_id_77["output_type"] = "val"
		self.new_volume_mapping_copy_32_copy_77_id_77["minimum"] = round(0,2)
		self.new_volume_mapping_copy_32_copy_77_id_77["maximum"] = round(85,2)
		self.new_volume_mapping_copy_32_copy_77_id_77["decimal_places"] = 2
		self.new_volume_mapping_copy_32_copy_77_id_77["ui_listener"] = "value"
		self.new_volume_mapping_copy_32_copy_77_id_77["feedback_brain"] = "feedback_range"
		self.new_volume_mapping_copy_32_copy_77_id_77["ctrl_type"] = "absolute"
		self.new_volume_mapping_copy_32_copy_77_id_77["takeover_mode"] = "None"
		self.new_volume_mapping_copy_32_copy_77_id_77["enc_first"] = 1
		self.new_volume_mapping_copy_32_copy_77_id_77["enc_second"] = 127
		self.new_volume_mapping_copy_32_copy_77_id_77["reverse_mode"] = False
		self.new_volume_mapping_copy_32_copy_77_id_77["LED_mapping_type_needs_feedback"] = "1"
		self.new_volume_mapping_copy_32_copy_77_id_77["LED_feedback"] = "default"
		self.new_volume_mapping_copy_32_copy_77_id_77["LED_feedback_active"] = "1"
		self.new_volume_mapping_copy_32_copy_77_id_77["LED_on"] = "127"
		self.new_volume_mapping_copy_32_copy_77_id_77["LED_off"] = "0"
		self.new_volume_mapping_copy_32_copy_77_id_77["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_48"]
		self.new_volume_mapping_copy_32_copy_77_id_77["snap_to"] = True
		self.new_volume_mapping_copy_32_copy_77_id_77["json_id"] = 77
		self.new_volume_mapping_copy_32_copy_77_id_77["mapping_name"] = "New Volume mapping  copy 32 copy 77"
		self.new_volume_mapping_copy_32_copy_77_id_77["mapping_type"] = "Volume"
		self.new_volume_mapping_copy_25_copy_33_id_33 = {}
		self.new_volume_mapping_copy_25_copy_33_id_33["attached_to"] = "midi_cc_ch_0_val_49"
		self.new_volume_mapping_copy_25_copy_33_id_33["track"] = self.track_num(2)
		self.new_volume_mapping_copy_25_copy_33_id_33["module"] = "self.c_mod(\"self.relative_tracks_dict[1]\", \"\", \".mixer_device.volume\", \"\")"
		self.new_volume_mapping_copy_25_copy_33_id_33["element"] = "value"
		self.new_volume_mapping_copy_25_copy_33_id_33["output_type"] = "val"
		self.new_volume_mapping_copy_25_copy_33_id_33["minimum"] = round(0,2)
		self.new_volume_mapping_copy_25_copy_33_id_33["maximum"] = round(85,2)
		self.new_volume_mapping_copy_25_copy_33_id_33["decimal_places"] = 2
		self.new_volume_mapping_copy_25_copy_33_id_33["ui_listener"] = "value"
		self.new_volume_mapping_copy_25_copy_33_id_33["feedback_brain"] = "feedback_range"
		self.new_volume_mapping_copy_25_copy_33_id_33["ctrl_type"] = "absolute"
		self.new_volume_mapping_copy_25_copy_33_id_33["takeover_mode"] = "None"
		self.new_volume_mapping_copy_25_copy_33_id_33["enc_first"] = 1
		self.new_volume_mapping_copy_25_copy_33_id_33["enc_second"] = 127
		self.new_volume_mapping_copy_25_copy_33_id_33["reverse_mode"] = False
		self.new_volume_mapping_copy_25_copy_33_id_33["LED_mapping_type_needs_feedback"] = "1"
		self.new_volume_mapping_copy_25_copy_33_id_33["LED_feedback"] = "default"
		self.new_volume_mapping_copy_25_copy_33_id_33["LED_feedback_active"] = "1"
		self.new_volume_mapping_copy_25_copy_33_id_33["LED_on"] = "127"
		self.new_volume_mapping_copy_25_copy_33_id_33["LED_off"] = "0"
		self.new_volume_mapping_copy_25_copy_33_id_33["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_49"]
		self.new_volume_mapping_copy_25_copy_33_id_33["snap_to"] = True
		self.new_volume_mapping_copy_25_copy_33_id_33["json_id"] = 33
		self.new_volume_mapping_copy_25_copy_33_id_33["mapping_name"] = "New Volume mapping  copy 25 copy 33"
		self.new_volume_mapping_copy_25_copy_33_id_33["mapping_type"] = "Volume"
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34 = {}
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["attached_to"] = "midi_cc_ch_0_val_50"
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["track"] = self.track_num(2)
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["module"] = "self.c_mod(\"self.relative_tracks_dict[2]\", \"\", \".mixer_device.volume\", \"\")"
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["element"] = "value"
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["output_type"] = "val"
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["minimum"] = round(0,2)
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["maximum"] = round(85,2)
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["decimal_places"] = 2
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["ui_listener"] = "value"
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["feedback_brain"] = "feedback_range"
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["ctrl_type"] = "absolute"
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["takeover_mode"] = "None"
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["enc_first"] = 1
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["enc_second"] = 127
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["reverse_mode"] = False
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["LED_mapping_type_needs_feedback"] = "1"
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["LED_feedback"] = "default"
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["LED_feedback_active"] = "1"
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["LED_on"] = "127"
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["LED_off"] = "0"
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_50"]
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["snap_to"] = True
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["json_id"] = 34
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["mapping_name"] = "New Volume mapping  copy 25 copy 26 copy 34"
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["mapping_type"] = "Volume"
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35 = {}
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["attached_to"] = "midi_cc_ch_0_val_51"
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["track"] = self.track_num(2)
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["module"] = "self.c_mod(\"self.relative_tracks_dict[3]\", \"\", \".mixer_device.volume\", \"\")"
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["element"] = "value"
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["output_type"] = "val"
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["minimum"] = round(0,2)
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["maximum"] = round(85,2)
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["decimal_places"] = 2
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["ui_listener"] = "value"
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["feedback_brain"] = "feedback_range"
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["ctrl_type"] = "absolute"
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["takeover_mode"] = "None"
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["enc_first"] = 1
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["enc_second"] = 127
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["reverse_mode"] = False
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["LED_mapping_type_needs_feedback"] = "1"
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["LED_feedback"] = "default"
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["LED_feedback_active"] = "1"
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["LED_on"] = "127"
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["LED_off"] = "0"
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_51"]
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["snap_to"] = True
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["json_id"] = 35
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["mapping_name"] = "New Volume mapping  copy 25 copy 26 copy 31 copy 35"
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["mapping_type"] = "Volume"
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36 = {}
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["attached_to"] = "midi_cc_ch_0_val_52"
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["track"] = self.track_num(2)
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["module"] = "self.c_mod(\"self.relative_tracks_dict[4]\", \"\", \".mixer_device.volume\", \"\")"
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["element"] = "value"
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["output_type"] = "val"
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["minimum"] = round(0,2)
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["maximum"] = round(85,2)
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["decimal_places"] = 2
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["ui_listener"] = "value"
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["feedback_brain"] = "feedback_range"
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["ctrl_type"] = "absolute"
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["takeover_mode"] = "None"
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["enc_first"] = 1
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["enc_second"] = 127
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["reverse_mode"] = False
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["LED_mapping_type_needs_feedback"] = "1"
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["LED_feedback"] = "default"
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["LED_feedback_active"] = "1"
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["LED_on"] = "127"
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["LED_off"] = "0"
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_52"]
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["snap_to"] = True
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["json_id"] = 36
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["mapping_name"] = "New Volume mapping  copy 25 copy 26 copy 30 copy 36"
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["mapping_type"] = "Volume"
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37 = {}
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["attached_to"] = "midi_cc_ch_0_val_53"
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["track"] = self.track_num(2)
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["module"] = "self.c_mod(\"self.relative_tracks_dict[5]\", \"\", \".mixer_device.volume\", \"\")"
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["element"] = "value"
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["output_type"] = "val"
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["minimum"] = round(0,2)
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["maximum"] = round(85,2)
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["decimal_places"] = 2
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["ui_listener"] = "value"
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["feedback_brain"] = "feedback_range"
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["ctrl_type"] = "absolute"
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["takeover_mode"] = "None"
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["enc_first"] = 1
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["enc_second"] = 127
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["reverse_mode"] = False
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["LED_mapping_type_needs_feedback"] = "1"
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["LED_feedback"] = "default"
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["LED_feedback_active"] = "1"
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["LED_on"] = "127"
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["LED_off"] = "0"
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_53"]
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["snap_to"] = True
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["json_id"] = 37
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["mapping_name"] = "New Volume mapping  copy 25 copy 26 copy 29 copy 37"
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["mapping_type"] = "Volume"
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38 = {}
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["attached_to"] = "midi_cc_ch_0_val_54"
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["track"] = self.track_num(2)
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["module"] = "self.c_mod(\"self.relative_tracks_dict[6]\", \"\", \".mixer_device.volume\", \"\")"
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["element"] = "value"
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["output_type"] = "val"
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["minimum"] = round(0,2)
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["maximum"] = round(85,2)
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["decimal_places"] = 2
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["ui_listener"] = "value"
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["feedback_brain"] = "feedback_range"
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["ctrl_type"] = "absolute"
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["takeover_mode"] = "None"
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["enc_first"] = 1
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["enc_second"] = 127
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["reverse_mode"] = False
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["LED_mapping_type_needs_feedback"] = "1"
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["LED_feedback"] = "default"
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["LED_feedback_active"] = "1"
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["LED_on"] = "127"
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["LED_off"] = "0"
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_54"]
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["snap_to"] = True
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["json_id"] = 38
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["mapping_name"] = "New Volume mapping  copy 25 copy 26 copy 28 copy 38"
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["mapping_type"] = "Volume"
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39 = {}
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["attached_to"] = "midi_cc_ch_0_val_55"
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["track"] = self.track_num(2)
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["module"] = "self.c_mod(\"self.relative_tracks_dict[7]\", \"\", \".mixer_device.volume\", \"\")"
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["element"] = "value"
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["output_type"] = "val"
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["minimum"] = round(0,2)
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["maximum"] = round(85,2)
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["decimal_places"] = 2
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["ui_listener"] = "value"
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["feedback_brain"] = "feedback_range"
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["ctrl_type"] = "absolute"
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["takeover_mode"] = "None"
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["enc_first"] = 1
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["enc_second"] = 127
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["reverse_mode"] = False
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["LED_mapping_type_needs_feedback"] = "1"
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["LED_feedback"] = "default"
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["LED_feedback_active"] = "1"
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["LED_on"] = "127"
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["LED_off"] = "0"
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_55"]
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["snap_to"] = True
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["json_id"] = 39
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["mapping_name"] = "New Volume mapping  copy 25 copy 26 copy 27 copy 39"
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["mapping_type"] = "Volume"
		self.new_session_box_navigation_mapping_id_14 = {}
		self.new_session_box_navigation_mapping_id_14["attached_to"] = "midi_note_ch_0_val_64"
		self.new_session_box_navigation_mapping_id_14["module"] = "self.c_mod(\"\", \"\", \"self\", \"\")"
		self.new_session_box_navigation_mapping_id_14["element"] = "scroll_sess_offset"
		self.new_session_box_navigation_mapping_id_14["move_by"] = 1
		self.new_session_box_navigation_mapping_id_14["output_type"] = "func"
		self.new_session_box_navigation_mapping_id_14["func_arg"] = "cnfg"
		self.new_session_box_navigation_mapping_id_14["tracks_scenes"] = "scenes"
		self.new_session_box_navigation_mapping_id_14["ui_listener"] = "offset"
		self.new_session_box_navigation_mapping_id_14["feedback_brain"] = "feedback_sessbox_nav"
		self.new_session_box_navigation_mapping_id_14["ctrl_type"] = "decrement"
		self.new_session_box_navigation_mapping_id_14["on_condition"] = "isEqualTo"
		self.new_session_box_navigation_mapping_id_14["enc_first"] = 127
		self.new_session_box_navigation_mapping_id_14["off_condition"] = "isEqualTo"
		self.new_session_box_navigation_mapping_id_14["enc_second"] = 0
		self.new_session_box_navigation_mapping_id_14["steps"] = 1
		self.new_session_box_navigation_mapping_id_14["switch_type"] = "momentary"
		self.new_session_box_navigation_mapping_id_14["LED_mapping_type_needs_feedback"] = "1"
		self.new_session_box_navigation_mapping_id_14["LED_feedback"] = "default"
		self.new_session_box_navigation_mapping_id_14["LED_feedback_active"] = "1"
		self.new_session_box_navigation_mapping_id_14["LED_on"] = "127"
		self.new_session_box_navigation_mapping_id_14["LED_off"] = "0"
		self.new_session_box_navigation_mapping_id_14["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_64"]
		self.new_session_box_navigation_mapping_id_14["json_id"] = 14
		self.new_session_box_navigation_mapping_id_14["mapping_name"] = "New Session Box Navigation mapping "
		self.new_session_box_navigation_mapping_id_14["mapping_type"] = "Session Box Navigation"
		self.new_session_box_navigation_mapping_copy_15_id_15 = {}
		self.new_session_box_navigation_mapping_copy_15_id_15["attached_to"] = "midi_note_ch_0_val_65"
		self.new_session_box_navigation_mapping_copy_15_id_15["module"] = "self.c_mod(\"\", \"\", \"self\", \"\")"
		self.new_session_box_navigation_mapping_copy_15_id_15["element"] = "scroll_sess_offset"
		self.new_session_box_navigation_mapping_copy_15_id_15["move_by"] = 1
		self.new_session_box_navigation_mapping_copy_15_id_15["output_type"] = "func"
		self.new_session_box_navigation_mapping_copy_15_id_15["func_arg"] = "cnfg"
		self.new_session_box_navigation_mapping_copy_15_id_15["tracks_scenes"] = "scenes"
		self.new_session_box_navigation_mapping_copy_15_id_15["ui_listener"] = "offset"
		self.new_session_box_navigation_mapping_copy_15_id_15["feedback_brain"] = "feedback_sessbox_nav"
		self.new_session_box_navigation_mapping_copy_15_id_15["ctrl_type"] = "increment"
		self.new_session_box_navigation_mapping_copy_15_id_15["on_condition"] = "isEqualTo"
		self.new_session_box_navigation_mapping_copy_15_id_15["enc_first"] = 127
		self.new_session_box_navigation_mapping_copy_15_id_15["off_condition"] = "isEqualTo"
		self.new_session_box_navigation_mapping_copy_15_id_15["enc_second"] = 0
		self.new_session_box_navigation_mapping_copy_15_id_15["steps"] = 1
		self.new_session_box_navigation_mapping_copy_15_id_15["switch_type"] = "momentary"
		self.new_session_box_navigation_mapping_copy_15_id_15["LED_mapping_type_needs_feedback"] = "1"
		self.new_session_box_navigation_mapping_copy_15_id_15["LED_feedback"] = "default"
		self.new_session_box_navigation_mapping_copy_15_id_15["LED_feedback_active"] = "1"
		self.new_session_box_navigation_mapping_copy_15_id_15["LED_on"] = "127"
		self.new_session_box_navigation_mapping_copy_15_id_15["LED_off"] = "0"
		self.new_session_box_navigation_mapping_copy_15_id_15["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_65"]
		self.new_session_box_navigation_mapping_copy_15_id_15["json_id"] = 15
		self.new_session_box_navigation_mapping_copy_15_id_15["mapping_name"] = "New Session Box Navigation mapping  copy 15"
		self.new_session_box_navigation_mapping_copy_15_id_15["mapping_type"] = "Session Box Navigation"
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16 = {}
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["attached_to"] = "midi_note_ch_0_val_66"
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["module"] = "self.c_mod(\"\", \"\", \"self\", \"\")"
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["element"] = "scroll_sess_offset"
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["move_by"] = 1
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["output_type"] = "func"
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["func_arg"] = "cnfg"
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["tracks_scenes"] = "tracks"
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["ui_listener"] = "offset"
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["feedback_brain"] = "feedback_sessbox_nav"
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["ctrl_type"] = "decrement"
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["on_condition"] = "isEqualTo"
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["enc_first"] = 127
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["off_condition"] = "isEqualTo"
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["enc_second"] = 0
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["steps"] = 1
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["switch_type"] = "momentary"
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["LED_mapping_type_needs_feedback"] = "1"
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["LED_feedback"] = "default"
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["LED_feedback_active"] = "1"
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["LED_on"] = "127"
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["LED_off"] = "0"
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_66"]
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["json_id"] = 16
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["mapping_name"] = "New Session Box Navigation mapping  copy 15 copy 16"
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16["mapping_type"] = "Session Box Navigation"
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17 = {}
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["attached_to"] = "midi_note_ch_0_val_67"
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["module"] = "self.c_mod(\"\", \"\", \"self\", \"\")"
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["element"] = "scroll_sess_offset"
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["move_by"] = 1
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["output_type"] = "func"
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["func_arg"] = "cnfg"
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["tracks_scenes"] = "tracks"
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["ui_listener"] = "offset"
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["feedback_brain"] = "feedback_sessbox_nav"
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["ctrl_type"] = "increment"
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["on_condition"] = "isEqualTo"
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["enc_first"] = 127
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["off_condition"] = "isEqualTo"
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["enc_second"] = 0
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["steps"] = 1
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["switch_type"] = "momentary"
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["LED_mapping_type_needs_feedback"] = "1"
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["LED_feedback"] = "default"
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["LED_feedback_active"] = "1"
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["LED_on"] = "127"
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["LED_off"] = "0"
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_67"]
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["json_id"] = 17
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["mapping_name"] = "New Session Box Navigation mapping  copy 15 copy 16 copy 17"
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17["mapping_type"] = "Session Box Navigation"
	def _mode1_led_listeners(self):
		try:
			self._mode1_fire_all_feedback()
		except:
			self.log("_mode1_led_listeners tried to call _mode1_fire_all_feedback but it does not exist")
		try:
			self.song().add_tracks_listener(self._all_tracks_listener)
		except:
			self.log("_mode1_led_listeners tried to call add_tracks_listener but it does not exist")
		try:
			self._mode1_ui_listeners()
		except:
			self.log("_mode1_led_listeners tried to call _mode1_ui_listeners but it does not exist")
		self.track_feedback(1)
		self.device_feedback(1)
		self.mode_device_bank_leds(1)
	def _remove_mode1_led_listeners(self):
		try:
			self.song().remove_tracks_listener(self._all_tracks_listener)
		except:
			self.log("_remove_mode1_led_listeners tried to call remove_tracks_listener but it does not exist")
		try:
			self._remove_mode1_ui_listeners()
		except:
			self.log("_remove_mode1_led_listeners tried to call _remove_mode1_ui_listeners but it does not exist")
	def _mode1_ui_listeners(self):
		try:
			module = eval(self.new_onoff_mapping_id_78['module'])
			module = eval(module) if self.new_onoff_mapping_id_78['module'].startswith('self.c_mod') else module
			self.new_onoff_mapping_id_78_led = module
			self.new_onoff_mapping_id_78_led.add_value_listener(self.new_onoff_mapping_id_78_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_onoff_mapping_id_78["element"]) + " does not exist")
		try:
			module = eval(self.new_onoff_mapping_copy_85_id_85['module'])
			module = eval(module) if self.new_onoff_mapping_copy_85_id_85['module'].startswith('self.c_mod') else module
			self.new_onoff_mapping_copy_85_id_85_led = module
			self.new_onoff_mapping_copy_85_id_85_led.add_value_listener(self.new_onoff_mapping_copy_85_id_85_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_onoff_mapping_copy_85_id_85["element"]) + " does not exist")
		try:
			module = eval(self.new_onoff_mapping_copy_84_id_84['module'])
			module = eval(module) if self.new_onoff_mapping_copy_84_id_84['module'].startswith('self.c_mod') else module
			self.new_onoff_mapping_copy_84_id_84_led = module
			self.new_onoff_mapping_copy_84_id_84_led.add_value_listener(self.new_onoff_mapping_copy_84_id_84_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_onoff_mapping_copy_84_id_84["element"]) + " does not exist")
		try:
			module = eval(self.new_onoff_mapping_copy_83_id_83['module'])
			module = eval(module) if self.new_onoff_mapping_copy_83_id_83['module'].startswith('self.c_mod') else module
			self.new_onoff_mapping_copy_83_id_83_led = module
			self.new_onoff_mapping_copy_83_id_83_led.add_value_listener(self.new_onoff_mapping_copy_83_id_83_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_onoff_mapping_copy_83_id_83["element"]) + " does not exist")
		try:
			module = eval(self.new_onoff_mapping_copy_82_id_82['module'])
			module = eval(module) if self.new_onoff_mapping_copy_82_id_82['module'].startswith('self.c_mod') else module
			self.new_onoff_mapping_copy_82_id_82_led = module
			self.new_onoff_mapping_copy_82_id_82_led.add_value_listener(self.new_onoff_mapping_copy_82_id_82_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_onoff_mapping_copy_82_id_82["element"]) + " does not exist")
		try:
			module = eval(self.new_onoff_mapping_copy_81_id_81['module'])
			module = eval(module) if self.new_onoff_mapping_copy_81_id_81['module'].startswith('self.c_mod') else module
			self.new_onoff_mapping_copy_81_id_81_led = module
			self.new_onoff_mapping_copy_81_id_81_led.add_value_listener(self.new_onoff_mapping_copy_81_id_81_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_onoff_mapping_copy_81_id_81["element"]) + " does not exist")
		try:
			module = eval(self.new_onoff_mapping_copy_80_id_80['module'])
			module = eval(module) if self.new_onoff_mapping_copy_80_id_80['module'].startswith('self.c_mod') else module
			self.new_onoff_mapping_copy_80_id_80_led = module
			self.new_onoff_mapping_copy_80_id_80_led.add_value_listener(self.new_onoff_mapping_copy_80_id_80_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_onoff_mapping_copy_80_id_80["element"]) + " does not exist")
		try:
			module = eval(self.new_onoff_mapping_copy_79_id_79['module'])
			module = eval(module) if self.new_onoff_mapping_copy_79_id_79['module'].startswith('self.c_mod') else module
			self.new_onoff_mapping_copy_79_id_79_led = module
			self.new_onoff_mapping_copy_79_id_79_led.add_value_listener(self.new_onoff_mapping_copy_79_id_79_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_onoff_mapping_copy_79_id_79["element"]) + " does not exist")
		try:
			module = eval(self.new_onoff_mapping_copy_79_copy_86_id_86['module'])
			module = eval(module) if self.new_onoff_mapping_copy_79_copy_86_id_86['module'].startswith('self.c_mod') else module
			self.new_onoff_mapping_copy_79_copy_86_id_86_led = module
			self.new_onoff_mapping_copy_79_copy_86_id_86_led.add_value_listener(self.new_onoff_mapping_copy_79_copy_86_id_86_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_onoff_mapping_copy_79_copy_86_id_86["element"]) + " does not exist")
		try:
			module = eval(self.new_volume_mapping_copy_56_copy_74_id_74['module'])
			module = eval(module) if self.new_volume_mapping_copy_56_copy_74_id_74['module'].startswith('self.c_mod') else module
			self.new_volume_mapping_copy_56_copy_74_id_74_led = module
			self.new_volume_mapping_copy_56_copy_74_id_74_led.add_value_listener(self.new_volume_mapping_copy_56_copy_74_id_74_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_volume_mapping_copy_56_copy_74_id_74["element"]) + " does not exist")
		try:
			module = eval(self.new_volume_mapping_copy_32_copy_77_id_77['module'])
			module = eval(module) if self.new_volume_mapping_copy_32_copy_77_id_77['module'].startswith('self.c_mod') else module
			self.new_volume_mapping_copy_32_copy_77_id_77_led = module
			self.new_volume_mapping_copy_32_copy_77_id_77_led.add_value_listener(self.new_volume_mapping_copy_32_copy_77_id_77_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_volume_mapping_copy_32_copy_77_id_77["element"]) + " does not exist")
		try:
			module = eval(self.new_volume_mapping_copy_25_copy_33_id_33['module'])
			module = eval(module) if self.new_volume_mapping_copy_25_copy_33_id_33['module'].startswith('self.c_mod') else module
			self.new_volume_mapping_copy_25_copy_33_id_33_led = module
			self.new_volume_mapping_copy_25_copy_33_id_33_led.add_value_listener(self.new_volume_mapping_copy_25_copy_33_id_33_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_volume_mapping_copy_25_copy_33_id_33["element"]) + " does not exist")
		try:
			module = eval(self.new_volume_mapping_copy_25_copy_26_copy_34_id_34['module'])
			module = eval(module) if self.new_volume_mapping_copy_25_copy_26_copy_34_id_34['module'].startswith('self.c_mod') else module
			self.new_volume_mapping_copy_25_copy_26_copy_34_id_34_led = module
			self.new_volume_mapping_copy_25_copy_26_copy_34_id_34_led.add_value_listener(self.new_volume_mapping_copy_25_copy_26_copy_34_id_34_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["element"]) + " does not exist")
		try:
			module = eval(self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35['module'])
			module = eval(module) if self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35['module'].startswith('self.c_mod') else module
			self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35_led = module
			self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35_led.add_value_listener(self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["element"]) + " does not exist")
		try:
			module = eval(self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36['module'])
			module = eval(module) if self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36['module'].startswith('self.c_mod') else module
			self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36_led = module
			self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36_led.add_value_listener(self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["element"]) + " does not exist")
		try:
			module = eval(self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37['module'])
			module = eval(module) if self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37['module'].startswith('self.c_mod') else module
			self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37_led = module
			self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37_led.add_value_listener(self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["element"]) + " does not exist")
		try:
			module = eval(self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38['module'])
			module = eval(module) if self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38['module'].startswith('self.c_mod') else module
			self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38_led = module
			self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38_led.add_value_listener(self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["element"]) + " does not exist")
		try:
			module = eval(self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39['module'])
			module = eval(module) if self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39['module'].startswith('self.c_mod') else module
			self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39_led = module
			self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39_led.add_value_listener(self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["element"]) + " does not exist")
		try:
			self._session.add_offset_listener(self.new_session_box_navigation_mapping_id_14_led_listener)
		except:
			self.log("_mode1_ui_listeners: self._session does not exist")
		try:
			self._session.add_offset_listener(self.new_session_box_navigation_mapping_copy_15_id_15_led_listener)
		except:
			self.log("_mode1_ui_listeners: self._session does not exist")
		try:
			self._session.add_offset_listener(self.new_session_box_navigation_mapping_copy_15_copy_16_id_16_led_listener)
		except:
			self.log("_mode1_ui_listeners: self._session does not exist")
		try:
			self._session.add_offset_listener(self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17_led_listener)
		except:
			self.log("_mode1_ui_listeners: self._session does not exist")
	def _remove_mode1_ui_listeners(self):
		try:
			self.new_onoff_mapping_id_78_led.remove_value_listener(self.new_onoff_mapping_id_78_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_onoff_mapping_id_78["element"]) + " does not exist")
		try:
			self.new_onoff_mapping_copy_85_id_85_led.remove_value_listener(self.new_onoff_mapping_copy_85_id_85_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_onoff_mapping_copy_85_id_85["element"]) + " does not exist")
		try:
			self.new_onoff_mapping_copy_84_id_84_led.remove_value_listener(self.new_onoff_mapping_copy_84_id_84_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_onoff_mapping_copy_84_id_84["element"]) + " does not exist")
		try:
			self.new_onoff_mapping_copy_83_id_83_led.remove_value_listener(self.new_onoff_mapping_copy_83_id_83_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_onoff_mapping_copy_83_id_83["element"]) + " does not exist")
		try:
			self.new_onoff_mapping_copy_82_id_82_led.remove_value_listener(self.new_onoff_mapping_copy_82_id_82_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_onoff_mapping_copy_82_id_82["element"]) + " does not exist")
		try:
			self.new_onoff_mapping_copy_81_id_81_led.remove_value_listener(self.new_onoff_mapping_copy_81_id_81_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_onoff_mapping_copy_81_id_81["element"]) + " does not exist")
		try:
			self.new_onoff_mapping_copy_80_id_80_led.remove_value_listener(self.new_onoff_mapping_copy_80_id_80_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_onoff_mapping_copy_80_id_80["element"]) + " does not exist")
		try:
			self.new_onoff_mapping_copy_79_id_79_led.remove_value_listener(self.new_onoff_mapping_copy_79_id_79_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_onoff_mapping_copy_79_id_79["element"]) + " does not exist")
		try:
			self.new_onoff_mapping_copy_79_copy_86_id_86_led.remove_value_listener(self.new_onoff_mapping_copy_79_copy_86_id_86_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_onoff_mapping_copy_79_copy_86_id_86["element"]) + " does not exist")
		try:
			self.new_volume_mapping_copy_56_copy_74_id_74_led.remove_value_listener(self.new_volume_mapping_copy_56_copy_74_id_74_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_volume_mapping_copy_56_copy_74_id_74["element"]) + " does not exist")
		try:
			self.new_volume_mapping_copy_32_copy_77_id_77_led.remove_value_listener(self.new_volume_mapping_copy_32_copy_77_id_77_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_volume_mapping_copy_32_copy_77_id_77["element"]) + " does not exist")
		try:
			self.new_volume_mapping_copy_25_copy_33_id_33_led.remove_value_listener(self.new_volume_mapping_copy_25_copy_33_id_33_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_volume_mapping_copy_25_copy_33_id_33["element"]) + " does not exist")
		try:
			self.new_volume_mapping_copy_25_copy_26_copy_34_id_34_led.remove_value_listener(self.new_volume_mapping_copy_25_copy_26_copy_34_id_34_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_volume_mapping_copy_25_copy_26_copy_34_id_34["element"]) + " does not exist")
		try:
			self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35_led.remove_value_listener(self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35["element"]) + " does not exist")
		try:
			self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36_led.remove_value_listener(self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36["element"]) + " does not exist")
		try:
			self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37_led.remove_value_listener(self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37["element"]) + " does not exist")
		try:
			self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38_led.remove_value_listener(self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38["element"]) + " does not exist")
		try:
			self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39_led.remove_value_listener(self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39["element"]) + " does not exist")
		try:
			self._session.remove_offset_listener(self.new_session_box_navigation_mapping_id_14_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: self._session does not exist")
		try:
			self._session.remove_offset_listener(self.new_session_box_navigation_mapping_copy_15_id_15_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: self._session does not exist")
		try:
			self._session.remove_offset_listener(self.new_session_box_navigation_mapping_copy_15_copy_16_id_16_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: self._session does not exist")
		try:
			self._session.remove_offset_listener(self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: self._session does not exist")
	def _mode1_fire_all_feedback(self):
		self.new_onoff_mapping_id_78_led_listener()
		self.new_onoff_mapping_copy_85_id_85_led_listener()
		self.new_onoff_mapping_copy_84_id_84_led_listener()
		self.new_onoff_mapping_copy_83_id_83_led_listener()
		self.new_onoff_mapping_copy_82_id_82_led_listener()
		self.new_onoff_mapping_copy_81_id_81_led_listener()
		self.new_onoff_mapping_copy_80_id_80_led_listener()
		self.new_onoff_mapping_copy_79_id_79_led_listener()
		self.new_onoff_mapping_copy_79_copy_86_id_86_led_listener()
		self.new_volume_mapping_copy_56_copy_74_id_74_led_listener()
		self.new_volume_mapping_copy_32_copy_77_id_77_led_listener()
		self.new_volume_mapping_copy_25_copy_33_id_33_led_listener()
		self.new_volume_mapping_copy_25_copy_26_copy_34_id_34_led_listener()
		self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35_led_listener()
		self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36_led_listener()
		self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37_led_listener()
		self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38_led_listener()
		self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39_led_listener()
		self.new_session_box_navigation_mapping_id_14_led_listener()
		self.new_session_box_navigation_mapping_copy_15_id_15_led_listener()
		self.new_session_box_navigation_mapping_copy_15_copy_16_id_16_led_listener()
		self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17_led_listener()
	def new_onoff_mapping_id_78_led_listener(self):
		self.feedback_brain(self.new_onoff_mapping_id_78)
	def new_onoff_mapping_copy_85_id_85_led_listener(self):
		self.feedback_brain(self.new_onoff_mapping_copy_85_id_85)
	def new_onoff_mapping_copy_84_id_84_led_listener(self):
		self.feedback_brain(self.new_onoff_mapping_copy_84_id_84)
	def new_onoff_mapping_copy_83_id_83_led_listener(self):
		self.feedback_brain(self.new_onoff_mapping_copy_83_id_83)
	def new_onoff_mapping_copy_82_id_82_led_listener(self):
		self.feedback_brain(self.new_onoff_mapping_copy_82_id_82)
	def new_onoff_mapping_copy_81_id_81_led_listener(self):
		self.feedback_brain(self.new_onoff_mapping_copy_81_id_81)
	def new_onoff_mapping_copy_80_id_80_led_listener(self):
		self.feedback_brain(self.new_onoff_mapping_copy_80_id_80)
	def new_onoff_mapping_copy_79_id_79_led_listener(self):
		self.feedback_brain(self.new_onoff_mapping_copy_79_id_79)
	def new_onoff_mapping_copy_79_copy_86_id_86_led_listener(self):
		self.feedback_brain(self.new_onoff_mapping_copy_79_copy_86_id_86)
	def new_volume_mapping_copy_56_copy_74_id_74_led_listener(self):
		self.feedback_brain(self.new_volume_mapping_copy_56_copy_74_id_74)
	def new_volume_mapping_copy_32_copy_77_id_77_led_listener(self):
		self.feedback_brain(self.new_volume_mapping_copy_32_copy_77_id_77)
	def new_volume_mapping_copy_25_copy_33_id_33_led_listener(self):
		self.feedback_brain(self.new_volume_mapping_copy_25_copy_33_id_33)
	def new_volume_mapping_copy_25_copy_26_copy_34_id_34_led_listener(self):
		self.feedback_brain(self.new_volume_mapping_copy_25_copy_26_copy_34_id_34)
	def new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35_led_listener(self):
		self.feedback_brain(self.new_volume_mapping_copy_25_copy_26_copy_31_copy_35_id_35)
	def new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36_led_listener(self):
		self.feedback_brain(self.new_volume_mapping_copy_25_copy_26_copy_30_copy_36_id_36)
	def new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37_led_listener(self):
		self.feedback_brain(self.new_volume_mapping_copy_25_copy_26_copy_29_copy_37_id_37)
	def new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38_led_listener(self):
		self.feedback_brain(self.new_volume_mapping_copy_25_copy_26_copy_28_copy_38_id_38)
	def new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39_led_listener(self):
		self.feedback_brain(self.new_volume_mapping_copy_25_copy_26_copy_27_copy_39_id_39)
	def new_session_box_navigation_mapping_id_14_led_listener(self):
		self.feedback_brain(self.new_session_box_navigation_mapping_id_14)
	def new_session_box_navigation_mapping_copy_15_id_15_led_listener(self):
		self.feedback_brain(self.new_session_box_navigation_mapping_copy_15_id_15)
	def new_session_box_navigation_mapping_copy_15_copy_16_id_16_led_listener(self):
		self.feedback_brain(self.new_session_box_navigation_mapping_copy_15_copy_16_id_16)
	def new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17_led_listener(self):
		self.feedback_brain(self.new_session_box_navigation_mapping_copy_15_copy_16_copy_17_id_17)
	################## CORE: Python 3 #################
	def get_value_from_ranges(self, a1, b2, c3, d4, e5, f6, g7, h8, i9, j10, k11):
		logging = a1 
		steps = b2 
		round_down = c3 
		current_input_value = d4 
		i = {}
		i["minimum"] = e5 
		i["maximum"] = f6 
		i["decimal_places"] = g7 
		i["steps"] = steps
		i["distance"] = i["maximum"] - i["minimum"] 
		i["speed"] = i["distance"] / i["steps"] 
		i["module"] = "self" 
		inn = self.step_values(i) 
		o = {}
		o["minimum"] = h8 
		o["maximum"] = i9 
		o["decimal_places"] = j10 
		o["reverse_mode"] = k11 
		o["steps"] = steps
		o["distance"] = o["maximum"] - o["minimum"] 
		o["speed"] = o["distance"] / o["steps"] 
		o["module"] = "self" 
		out = self.step_values(o) 
		closest_inn = self.f_n(inn, current_input_value, round_down)
		relative_out_value = out[closest_inn['index']]
		ret = {}
		ret['in'] = inn
		ret['selected_in'] = closest_inn
		ret['out'] = out
		ret["selected_out"] = relative_out_value
		if(logging == True): 
			if(round_down == False):
				rounding = "up"
				rou_symb = str(">")
			else:
				rounding = "down"
				rou_symb = str("<")
			log_arr = []
			log_arr.append("In: " + str(current_input_value) )
			log_arr.append("Out: " + str(ret["selected_out"]) )
			log_arr.append("Steps: " + str(steps) )
			log_arr.append("Rounding: " + str(rounding) )
			log_arr.append("Rev: " + str(o["reverse_mode"]) )
			log_str = ' '.join(log_arr)
			table_arr = []
			table_arr.append(str("<table class='rangeValueTable'>") )
			step_arr = []
			count = 0
			for item in ret['in']:
				if(count==ret['selected_in']['index']):
					td = "<td class='slctd'>"
				else:
					td = "<td>"
				step_arr.append(td + str(count) + "</td>")
				count = count + 1
			step_str = ''.join(step_arr)
			in_arr = []
			count = 0
			for item in ret['in']:
				td = "<td>"
				if(count==ret['selected_in']['index']):
					td = "<td class='slctd'>"
				in_arr.append(td + str(item) + "</td>")
				count = count + 1
			in_str = ''.join(in_arr)
			out_arr = []
			count = 0
			for item in ret['out']:
				td = "<td>"
				if(count==ret['selected_in']['index']):
					td = "<td class='slctd'>"
				out_arr.append(td + str(item) + "</td>")
				count = count + 1
			out_str = ''.join(out_arr)
			rev = ""
			if o["reverse_mode"] == True:
				rev = "(Rev)"
			table_arr.append(str("<tr><td class='hd'>Steps</td>" + step_str + "</tr>") )
			table_arr.append(str("<tr><td class='hd'>In (" + rou_symb + str(current_input_value) + ")</td>" + in_str + "</tr>") )
			table_arr.append(str("<tr><td class='hd'>Out " + rev + "</td>" + out_str + "</tr>") )
			table_arr.append(str("</table>") )
			table_str = ''.join(table_arr)
			self.log_message("csslog: " + str(table_str) )
		return ret["selected_out"]
	def f_n(self, array, current_val, round_down = True):     
		i = 0
		nearest = {}
		nearest['index'] = None
		nearest['value'] = None
		prev_idx = i 
		prev_val = array[0] 
		for array_val in array:
			if array_val == current_val:
				nearest['index'] = i
				nearest['value'] = array_val
				break
			elif current_val > prev_val and current_val < array_val:
				if round_down is True:
					nearest['index'] = prev_idx
					nearest['value'] = prev_val
				else:
					nearest['index'] = i
					nearest['value'] = array_val
				break
			else: 
				prev_val = array_val
				prev_idx = i
				i = i + 1
		return nearest;
	def placehold_listener(self, value):
		return
	def c_mod(self, track='', device='', parameter='', val=''):
		return_string = ""
		if track!='':
			if track.startswith("self.get_modifier_value"):
				track = eval(track)
			return_string += str(track)
		if device!='':
			if device.startswith("self.get_modifier_value"):
				device = eval(device)
			return_string += str(device)	
		if parameter!='':
			return_string += parameter
		if val != '': 
			return_string += "[" + str(val) + "]"
		return return_string
	def pick_brain(self, obj):
		cnfg = obj.copy() 
		controller = getattr(self, cnfg["attached_to"])
		cnfg["value"] = controller.cur_val 
		if cnfg["module"].startswith("self.c_mod"):
			module = eval(cnfg["module"])
			cnfg["module"] = module
		if cnfg["ctrl_type"] == "relative":
			cnfg = self.set_relative_controls(cnfg);
			if cnfg["enc_first"] == None and cnfg["enc_second"] == None and cnfg["steps"] == None:
				return 
		if cnfg["output_type"] == "val":
				self.val_brain(cnfg)
		elif cnfg["output_type"] == "func":
			self.func_brain(cnfg)
		elif cnfg["output_type"] == "bool":
			self.bool_brain(cnfg)
		if cnfg["mapping_type"] == "Parameter":
			try:
				param_name = getattr(eval(cnfg["module"]), "name")
				self.show_message("Parameter: " + str(param_name))
			except:
				pass
	def should_it_fire(self, cnfg):
		controller = getattr(self, cnfg["attached_to"])
		cnfg["value"] = controller.cur_val
		cnfg["pre_val"] = controller.pre_val
		cnfg["prev_press_time"] = controller.prev_press_time
		timenow = time.time()
		fire = 0
		if cnfg["ctrl_type"] in ["on/off", "increment", "decrement"]:
			if "on_condition" not in cnfg:
				cnfg["on_condition"] = "isEqualTo"
			if "off_condition" not in cnfg:
				cnfg["off_condition"] = "isEqualTo"
			if cnfg["switch_type"] == "delay":
				if cnfg["on_condition"] == "isBetween":
					if cnfg["off_isBetween_1"] <= cnfg["value"] <= cnfg["off_isBetween_2"]:
						if (timenow - cnfg["prev_press_time"]) > cnfg["delay_amount"]:
							fire = 3
				elif cnfg["on_condition"] == "isEqualTo":
					if cnfg["value"] == cnfg["enc_second"] and (timenow - cnfg["prev_press_time"]) > cnfg["delay_amount"]:
						fire = 3
			elif cnfg["switch_type"] == "momentary" or cnfg["switch_type"] == "toggle":
				if cnfg["on_condition"] == "isBetween":
					if cnfg["on_isBetween_1"] <= cnfg["value"] <= cnfg["on_isBetween_2"]:
						fire = 3
				elif cnfg["on_condition"] == "isEqualTo":
					if cnfg["value"] == cnfg["enc_first"]:
						fire = 3
				if cnfg["switch_type"] == "toggle":
					if cnfg["off_condition"] == "isBetween":
						if cnfg["off_isBetween_1"] <= cnfg["value"] <= cnfg["off_isBetween_2"]:
							fire = 2
					elif cnfg["off_condition"] == "isEqualTo":
						if cnfg["value"] == cnfg["enc_second"]:
							fire = 2
		elif cnfg["ctrl_type"] == "absolute":
			if cnfg["value"] >= cnfg["enc_first"] and cnfg["value"] <= cnfg["enc_second"]:
				fire = 1
		elif cnfg["ctrl_type"] == "relative":
			if cnfg["value"] == cnfg["enc_first"] or cnfg["value"] == cnfg["enc_second"]:
				fire = 1
		return fire
	def bool_brain(self, cnfg):
		try: 
			method_to_call = getattr(eval(cnfg["module"]), cnfg["element"])
		except:
			self.show_message("Parameter does not currently exist in this session for mapping: " + str(cnfg["mapping_name"]))
			return
		fire = self.should_it_fire(cnfg)
		if fire >= 1:
			if cnfg["element"] == "solo" and self.song().exclusive_solo:
				for index in range(len(self.song().tracks)):
					self.song().tracks[index].solo = False
				for index in range(len(self.song().return_tracks)):
					self.song().return_tracks[index].solo = False
			if cnfg["element"] == "arm" and self.song().exclusive_arm:
				for index in range(len(self.song().tracks)):
					try:
						self.song().tracks[index].arm = False
					except Exception as e:
						continue           
			if method_to_call is False:
				try:
					setattr(eval(cnfg["module"]), cnfg["element"], True)
				except Exception as e:
					self.show_message("Unable to set " + str(cnfg["element"]) + " to True")
			else: 
				try:
					setattr(eval(cnfg["module"]), cnfg["element"], False)
				except Exception as e:
					self.show_message("Unable to set " + str(cnfg["element"]) + " to False")
	def func_brain(self, cnfg):
		try: 
			method_to_call = getattr(eval(cnfg["module"]), cnfg["element"])
		except:
			self.show_message("Parameter does not currently exist in this session for mapping: " + str(cnfg["mapping_name"]))
			return
		fire = self.should_it_fire(cnfg)
		cnfg["should_it_fire"] = fire 
		if fire >= 1: 
			if cnfg["func_arg"] != "" and cnfg["func_arg"] != "cnfg":
				method_to_call(cnfg["func_arg"]) 
			elif cnfg["func_arg"] == "cnfg":
				method_to_call(cnfg) 
			else: 
				method_to_call()
	def val_brain(self, cnfg):
		try:
			cnfg["current_position"] = getattr(eval(cnfg["module"]), cnfg["element"]) 
		except:
			self.show_message("Parameter does not currently exist in this session for mapping: " + str(cnfg["mapping_name"]))
			return
		self._parameter_to_map_to = eval(cnfg["module"])
		if cnfg["ctrl_type"] != "on/off" and hasattr(self._parameter_to_map_to, "max") and hasattr(self._parameter_to_map_to, "min"):
			param_range = self._parameter_to_map_to.max - self._parameter_to_map_to.min
			if "minimum" in cnfg:
				usermin = cnfg["minimum"] / 100.;
				min_value = float(usermin * param_range) 
				cnfg["minimum"] = min_value + self._parameter_to_map_to.min
			if "maximum" in cnfg and cnfg["mapping_type"] != "On/Off":
				usermax = cnfg["maximum"] / 100.;
				max_value = float(usermax * param_range) 
				cnfg["maximum"] = max_value + self._parameter_to_map_to.min
		controller = getattr(self, cnfg["attached_to"])
		cnfg["value"] = controller.cur_val 
		cnfg["pre_val"] = controller.pre_val 
		if "decimal_places" in cnfg:
			cnfg["current_position"] = round(cnfg["current_position"], cnfg["decimal_places"])
		if cnfg["ctrl_type"] == "absolute":
			cnfg["steps"] = (cnfg["enc_second"] - cnfg["enc_first"]) 
		if cnfg["ctrl_type"] != "on/off":
			cnfg["distance"] = cnfg["maximum"] - cnfg["minimum"] 
			cnfg["speed"] = cnfg["distance"] / cnfg["steps"] 
			cnfg["step_values"] = self.step_values(cnfg) 
		if cnfg["ctrl_type"] not in ["on/off", "increment", "decrement", "relative"]:
			cnfg["velocity_seq"] = self._velocity_seq(cnfg) 
		if cnfg["ctrl_type"] != "on/off" and (cnfg["current_position"] < cnfg["minimum"] or cnfg["current_position"] > cnfg["maximum"]):
			new_val = self.snap_to_max_min(cnfg)
		elif cnfg["ctrl_type"] == "absolute":
			new_val = self.absolute_decision(cnfg)
		elif cnfg["ctrl_type"] == "relative":
			new_val = self.relative_decision(cnfg)
		elif cnfg["ctrl_type"] == "on/off" or cnfg["ctrl_type"] == "increment" or cnfg["ctrl_type"] == "decrement":
			new_val = self.button_decision(cnfg)
		try:
			setattr(eval(cnfg["module"]), cnfg["element"], new_val)
		except:
			return
	def snap_to_max_min(self, cnfg):
		if cnfg["snap_to"] == False:
			new_val = cnfg["current_position"]
			self.show_message("Snapping is off for this control. Check min / max values")
			return new_val
		if cnfg["current_position"] > cnfg["maximum"]:
			self.show_message("Auto snapped to max value setting")
			new_val = cnfg["maximum"]
		elif cnfg["current_position"] < cnfg["minimum"]:
			self.show_message("Auto snapped to min value setting") 
			new_val = cnfg["minimum"]
		else:
			new_val = cnfg["current_position"]
		return new_val
	def step_values(self, cnfg):
		if "module" not in cnfg or cnfg["module"] != "self":
			p = eval(cnfg["module"]) 
			if hasattr(p, 'min') and hasattr(p, 'max') and p.min == 0 and p.max == 100:
				cnfg["decimal_places"] = 0
			if hasattr(p, 'is_quantized') and p.is_quantized == True:
				cnfg["decimal_places"] = 0
		calc = []
		for i in range(0, cnfg["steps"] +1):
			val = (i * cnfg["speed"]) + cnfg["minimum"]
			if "decimal_places" in cnfg:
				val = round(val, cnfg["decimal_places"])
				if cnfg["decimal_places"] == 0:
					val = int(val) 
			calc.append(val)
		if "reverse_mode" in cnfg and cnfg["reverse_mode"] is True:
			calc = list(reversed(calc))
		return calc
	def set_relative_controls(self, cnfg):
		left = self.match_relative(cnfg["relative_controls"], 'left', cnfg["value"])
		right = self.match_relative(cnfg["relative_controls"], 'right', cnfg["value"])
		if left != None:
			cnfg["enc_first"] = int(cnfg["value"])
			cnfg["enc_second"] = None
			cnfg["steps"] = int(left[0]["steps"])
		elif right != None: 
			cnfg["enc_first"] = None
			cnfg["enc_second"] = int(cnfg["value"])
			cnfg["steps"] = int(right[0]["steps"])
		else: 
			cnfg["enc_first"] = None
			cnfg["enc_second"] = None
			cnfg["steps"] = None
		return cnfg
	def match_relative(self, relative_controls, property_name, value):
		if property_name not in ['left', 'right', 'steps']:
			return None
		for index, control in enumerate(relative_controls):
			property_value = control.get(property_name)
			if isinstance(property_value, str) and '-' in property_value:
				range_start, range_end = property_value.split('-')
				try:
					range_start = float(range_start)  
					range_end = float(range_end)      
				except ValueError:
					return None
				if range_start <= value <= range_end:
					return control, index
			elif int(property_value) == int(value): 
				return control, index  
		return None  
	def relative_decision(self, cnfg):
		fire = 0
		new_val = cnfg["current_position"] 
		if cnfg["value"] == cnfg["enc_second"]: 
			max_min = "max" 
			fire = 1
		elif cnfg["value"] == cnfg["enc_first"]: 
			max_min = "min" 
			fire = 1
		if fire == 0:
			return new_val
		if cnfg["current_position"] in cnfg["step_values"]:
			current_pos_index = cnfg["step_values"].index(cnfg["current_position"])
			feedback = current_pos_index / cnfg["steps"] * 127
			feedback = round(feedback, 0)
			method_to_call = getattr(self, cnfg["attached_to"])
			incr_index = current_pos_index + 1
			decr_index = current_pos_index - 1
			if max_min == "max" and incr_index < len(cnfg["step_values"]): 
				incr = cnfg["step_values"][incr_index]
				while incr == cnfg["current_position"]:
					incr_index = incr_index + 1
					if incr_index < len(cnfg["step_values"]):
						incr = cnfg["step_values"][incr_index]
					else:
						break
				new_val = incr
			elif max_min == "min" and decr_index >= 0: 
				decr = cnfg["step_values"][decr_index]
				new_val = decr
			return new_val    
		else:   
			new_val = self.step_in_line(cnfg, max_min)
			return new_val
		return new_val
	def percent_as_value(self, param, percentage):
		param = eval(param)
		if hasattr(param, 'max') and hasattr(param, 'min'):
			param_range = param.max - param.min
			if percentage > 1.0:
				percentage /= 100  
			val = param.min + (percentage * param_range)  
			return val
		else: 
			self.log("param does not have min and/or max attribute(s)")
	def button_decision(self, cnfg):
		new_val = cnfg["current_position"] 
		fire = self.should_it_fire(cnfg)
		if fire == 0:
			return new_val;
		if cnfg["ctrl_type"] == "on/off":
			max_val = self.percent_as_value(cnfg["module"], cnfg["maximum"])
			min_val = self.percent_as_value(cnfg["module"], cnfg["minimum"])
			if "decimal_places" in cnfg:
				max_val = round(max_val,cnfg["decimal_places"])
				min_val = round(min_val,cnfg["decimal_places"])
			if(cnfg["switch_type"] == "toggle"):
				if fire == 3:
					new_val = max_val
					return new_val
				elif fire == 2:
					new_val = min_val
					return new_val
			elif cnfg["switch_type"] in ["momentary", "delay"]:
				if(cnfg["current_position"] == max_val):
					new_val = min_val
				else: 
					new_val = max_val
				return new_val
			else:
				self.log_message("csslog: neither Momentary, Toggle or Delay were set for on off button")
				return new_val
		if cnfg["current_position"] in cnfg["step_values"]:
			current_pos_index = cnfg["step_values"].index(cnfg["current_position"])
			incr_index = current_pos_index + 1
			decr_index = current_pos_index - 1
			if cnfg["ctrl_type"] ==  "increment" and incr_index < len(cnfg["step_values"]): 
				incr = cnfg["step_values"][incr_index]
				new_val = incr
			elif cnfg["ctrl_type"] == "decrement" and decr_index >= 0: 
				decr = cnfg["step_values"][decr_index]
				new_val = decr
			return new_val
		else:
			if cnfg["ctrl_type"] ==  "increment": 
				max_min = "max"
			elif cnfg["ctrl_type"] == "decrement": max_min = "min"
			new_val = self.step_in_line(cnfg, max_min)
			return new_val
		return new_val
	def step_in_line(self, cnfg, max_min):
		previous = int()
		step_num = 0
		speed = 0 
		for step_val in cnfg["step_values"]:
			step_num += 1
			if cnfg["current_position"] > previous and cnfg["current_position"] < step_val:
				if max_min == "min":
					speed = cnfg["current_position"] - previous 
					new_val = previous
				elif max_min == "max":
					speed = step_val - cnfg["current_position"] 
					new_val = step_val
				break
			previous = step_val
		return new_val
	def absolute_decision(self, cnfg):
		if(cnfg["enc_first"] > cnfg["enc_second"]):
			self.log("enc_first is higher than enc_second, needs to be lower")
		new_val = cnfg["current_position"] 
		if cnfg["pre_val"] is None:
			return new_val
		######### Get pre_val details from list values ######### 
		######### ######### ######### ######## ######
		if cnfg["pre_val"] in cnfg["velocity_seq"]: 
			cnfg["previous_step_num"] = cnfg["velocity_seq"].index(cnfg["pre_val"]) 
			cnfg["previous_step_value"] = cnfg["step_values"][cnfg["previous_step_num"]] 
		else:
			cnfg["previous_step_value"] = None
		######### get value details from list ######### 
		######### ######### ######### ######### ######
		if cnfg["value"] in cnfg["velocity_seq"]:
			cnfg["step_num"] = cnfg["velocity_seq"].index(cnfg["value"]) 
			cnfg["step_value"] = cnfg["step_values"][cnfg["step_num"]] 
		else: 
			cnfg["step_num"] = None
			cnfg["step_value"] = None
		######### MAX OR MIN ########
		######### ######### ######### 
		if cnfg["reverse_mode"] is False:
			if cnfg["value"] > cnfg["pre_val"]: max_min = "max"
			elif cnfg["value"] < cnfg["pre_val"]: max_min = "min"
		elif cnfg["reverse_mode"] is True:
			if cnfg["value"] > cnfg["pre_val"]: max_min = "min"
			elif cnfg["value"] < cnfg["pre_val"]: max_min = "max"
		inside_outside = self.inside_outside_checks(cnfg)
		if inside_outside is not False:
			self.log("inside outside was not false")
			return inside_outside
		######### straight assign or takeover ######### 
		######### ######### ######### ######### #######
		if cnfg["previous_step_value"] == cnfg["current_position"]:
			new_val = cnfg["step_value"]
		elif cnfg["takeover_mode"] == "None": 
			new_val = cnfg["step_value"]
		elif cnfg["takeover_mode"] == "Pickup": 
			param = eval(cnfg["module"])
			cnfg["parameter_value"] = param.value
			new_val = self.pickup(cnfg)
		elif cnfg["takeover_mode"] == "Value scaling":
			if "max_min" in cnfg:
				new_val = self.value_scaling(cnfg, cnfg["max_min"])
			else:
				new_val = cnfg["step_value"]
		else: self.log("nothing got decided")
		return new_val
	def inside_outside_checks(self, cnfg):
		new_val = cnfg["current_position"]
		if cnfg["reverse_mode"] is False: 
			minimum = cnfg["minimum"]
			maximum = cnfg["maximum"]
		elif cnfg["reverse_mode"] is True: 
			minimum = cnfg["maximum"]
			maximum = cnfg["minimum"]
		######### was outside and is still outside ######
		######### ######### ######### ######### ######### 
		if (cnfg["pre_val"] < cnfg["enc_first"] and cnfg["value"] < cnfg["enc_first"]):
			self.log("was below and still below")
			return new_val
		elif (cnfg["pre_val"] > cnfg["enc_second"] and cnfg["value"] > cnfg["enc_second"]):
			self.log("was above and still above")
			return new_val
		## 1. Going Below
		if (cnfg["pre_val"] >= cnfg["enc_first"] and cnfg["value"] < cnfg["enc_first"]): 
			self.log("going below enter")
			if cnfg["takeover_mode"] == "Pickup":
				if cnfg["reverse_mode"] is False and cnfg["current_position"] > cnfg["previous_step_value"]:
					return new_val
				elif cnfg["reverse_mode"] is True and cnfg["current_position"] < cnfg["previous_step_value"]:
					return new_val
			if cnfg["reverse_mode"] is False:
				new_val = minimum
				self.log("going below 1")
				return new_val
			elif cnfg["reverse_mode"] is True:
				new_val = minimum
				self.log("going below 2")
				return new_val
		## 2. Going Above
		if (cnfg["pre_val"] <= cnfg["enc_second"] and cnfg["value"] > cnfg["enc_second"]):
			if cnfg["takeover_mode"] == "Pickup":
				self.log("THIS SHOULD FIRE 1")
				if cnfg["reverse_mode"] is False and cnfg["current_position"] < cnfg["previous_step_value"]:
					self.log("THIS SHOULD FIRE 2")
					return new_val
				elif cnfg["reverse_mode"] is True and cnfg["current_position"] > cnfg["previous_step_value"]:
					return new_val 
			if cnfg["reverse_mode"] is False:
				new_val = maximum
				self.log("going above 1")
				return new_val
			elif cnfg["reverse_mode"] is True:
				new_val = maximum
				self.log("going above 2")
				return new_val
		#########  >>0<< Coming inside ########
		######### ######### ######### ######### 
		if (cnfg["pre_val"] < cnfg["enc_first"] and cnfg["value"] >= cnfg["enc_first"]):
			self.log("come in from below")
		elif (cnfg["pre_val"] > cnfg["enc_second"] and cnfg["value"] <= cnfg["enc_second"]):
			self.log("coming in from above")
		return False
	def _velocity_seq(self,cnfg):
		number_of_steps = cnfg['enc_second'] - cnfg['enc_first']
		arr = []
		i = 0
		sequence_num = cnfg['enc_first']
		while i <= number_of_steps:
			arr.append(sequence_num)
			i += 1
			sequence_num += 1
		return arr
	def pickup(self, cnfg):
		if(cnfg["pre_val"] == -1):
			cnfg["pre_val"] = cnfg["value"]
		parameter_value = cnfg["parameter_value"]
		velocity_index = cnfg["velocity_seq"].index(cnfg["value"])
		combined_dict = dict(zip(cnfg["velocity_seq"], cnfg["step_values"]))
		interval_size = cnfg["speed"] * 3 
		velocity_range_value = combined_dict[cnfg["value"]]
		velocity_range_pre_value = combined_dict[cnfg["pre_val"]]
		if (velocity_range_value + interval_size) >= parameter_value and (velocity_range_pre_value - interval_size) <= parameter_value:
			new_val = cnfg["step_value"]
		elif (velocity_range_value - interval_size) <= parameter_value and (velocity_range_pre_value + interval_size) >= parameter_value:
			new_val = cnfg["step_value"]
		else: 
			msg = "Waiting for pickup " + str(cnfg["step_value"]) + " >> " + str(cnfg["current_position"])
			self.show_message(msg)
			new_val = cnfg["current_position"]
		return new_val
	def value_scaling(self, cnfg, max_min):
		step_num = cnfg["step_num"]
		step_value = cnfg["step_value"]
		remaining_steps = cnfg["steps"] - step_num 
		new_val = cnfg["current_position"] 
		distance_to_max = cnfg["maximum"] - cnfg["current_position"]
		distance_to_min = cnfg["current_position"] - cnfg["minimum"]
		speed_to_max = 0
		speed_to_min = 0
		if cnfg["current_position"] >= cnfg["minimum"] and cnfg["current_position"] <= cnfg["maximum"]:
			if max_min == "max" and distance_to_max > 0:
				if cnfg["reverse_mode"] is False and remaining_steps > 0: speed_to_max = distance_to_max / remaining_steps
				elif cnfg["reverse_mode"] is True and step_num > 0: speed_to_max = distance_to_max / step_num
				if speed_to_max != 0: new_val = speed_to_max + cnfg["current_position"]
			elif max_min == "min" and distance_to_min > 0:
				if cnfg["reverse_mode"] is False and step_num > 0: speed_to_min = distance_to_min / step_num
				elif cnfg["reverse_mode"] is True and remaining_steps > 0: speed_to_min = distance_to_min / remaining_steps
				if speed_to_min != 0: new_val = cnfg["current_position"] - speed_to_min
		return new_val
	def generate_relative_tracks_dict(self):
		tracks_dict = {}
		all_tracks_dict = {}
		total_tracks = self.get_num_of_tracks("visible_tracks") + self.get_num_of_tracks("return_tracks")
		if hasattr(self, '_session') and self._session is not None and hasattr(self._session, 'track_offset'):
			offset = self._session.track_offset()
			width = self._session.width()
			available_tracks = total_tracks - offset
			if available_tracks < width:
				width = available_tracks
		else:
			offset = 0
			width = total_tracks
		for i in range(total_tracks):
			if i < self.get_num_of_tracks("visible_tracks"):
				all_tracks_dict[i] = self.song().visible_tracks[i] 
			else:
				return_track_index = i - self.get_num_of_tracks("visible_tracks")
				all_tracks_dict[i] = self.song().return_tracks[return_track_index]
		all_tracks_dict[total_tracks] = self.song().master_track
		for i in range(width):
			adjusted_index = i + offset
			if adjusted_index < self.get_num_of_tracks("visible_tracks"):
				tracks_dict[i] = self.song().visible_tracks[adjusted_index] 
			else:
				return_track_index = adjusted_index - self.get_num_of_tracks("visible_tracks")
				tracks_dict[i] = self.song().return_tracks[return_track_index]
		self.all_tracks_dict = all_tracks_dict
		self.relative_tracks_dict = tracks_dict		
	def track_num(self, track_num):
		if ((hasattr(self, '_session')) and (self._session is not None)):
			track_num = track_num + self._session._track_offset
		else: 
			track_num = track_num
		return track_num
	def scene_num(self, scene_num):
		if ((hasattr(self, '_session')) and (self._session is not None)):
			scene_num = scene_num + self._session._scene_offset 
		else: 
			scene_num = scene_num
		return scene_num
	def log_cnfg_settings(self, cnfg):
		for i in cnfg:
			text = i + ": " + str(cnfg[i])
			self.log(text)
	def dump(self, obj):
		for attr in dir(obj):
			try:
				self.log_message("csslog: obj.%s = %r" % (attr, getattr(obj, attr)))
			except Exception as e:
				self.log_message("csslog: skip")
	def log(self, msg):
		if self.debug_on is True:
			self.log_message("csslog:" + str(msg))
	def pret(self, ugly):
		for key,value in sorted(ugly.items()):
			self.log_message(key)
			self.log_message(value)
			self.log_message("")
	################## Extra Functions: Python 3 #################
	def add_selected_chain_listeners(self):
		selected_track = self.song().view.selected_track
		for i, device in enumerate(selected_track.devices):
			self._add_chain_listener_if_applicable(device, "self.song().view.selected_track.devices[%d]" % i)
	def _add_chain_listener_if_applicable(self, device, device_path):
		if hasattr(device, 'can_have_chains') and device.can_have_chains:
			if not device.view.selected_chain_has_listener(self._on_selected_chain_changed):
				device.view.add_selected_chain_listener(lambda: self._on_selected_chain_changed(device))
		if hasattr(device, 'chains'):
			for chain_index, chain in enumerate(device.chains):
				for nested_index, nested_device in enumerate(chain.devices):
					self._add_chain_listener_if_applicable(nested_device, "%s.chains[%d].devices[%d]" % (device_path, chain_index, nested_index))
	def search_devices(self, devices, device_name, path, check_selected_chain):
		instances = []  
		for index, device in enumerate(devices):
			current_path = "%s[%d]" % (path, index)  
			if device.name == device_name:
				instances.append(current_path)  
			if check_selected_chain and hasattr(device, 'view') and hasattr(device.view, 'selected_chain'):
				selected_chain = device.view.selected_chain
				if hasattr(selected_chain, 'devices'):
					result = self.search_devices(selected_chain.devices, device_name, "%s.view.selected_chain.devices" % current_path, check_selected_chain)  
					instances.extend(result)  
			elif not check_selected_chain and hasattr(device, 'chains'):
				for chain_index, chain in enumerate(device.chains):
					chain_path = "%s.chains[%d].devices" % (current_path, chain_index)  
					if hasattr(chain, 'devices'):
						result = self.search_devices(chain.devices, device_name, chain_path, check_selected_chain)  
						instances.extend(result)  
		return instances  
	def find_device_path(self, track, device_name, path, check_selected_chain):
		return self.search_devices(track.devices, device_name, path, check_selected_chain)
	######## /End of Find Device By Name #########
	def get_list(self, list_name):
		try:
			if list_name in self.lists:
				return self.lists[list_name]["value"]
			else: 
				self.log_message('csslog: The custom list "' + str(list_name) + '" does not exist')
				return False
		except Exception as e:
			self.log_message('csslog: There was an error getting a custom list with "get_list", ' + str(e))
			return False
	def get_list_length(self, list_name):
		theList = self.get_list(list_name) 
		if theList is False: 
			return False
		return len(theList)
	def get_list_item(self, list_name, item_num):
		try:
			theList = self.get_list(list_name) 
			if theList is False: 
				return False
			list_len = self.get_list_length(list_name)
			if list_len is False: 
				return
			if list_len >= item_num:
				return theList[item_num - 1]
			else: 
				self.log_message('csslog: Custom list "' + str(list_name) + '" does not have ' + str(item_num) + ' items')
				return False
		except Exception as e:
			self.log_message('csslog: There was an error in "get_list_item"', str(e))
			return False
	def add_to_list(self, list_name, value_to_add, position):
		try:
			theList = self.get_list(list_name)
			if theList is False: 
				return False
			list_len = self.get_list_length(list_name)
			if position is None or position > list_len: 
				position = list_len 
			theList.insert(position, value_to_add) 
		except Exception as e: 
			self.log_message('csslog: There was an error in "add_to_list()", ' + str(e))
			return False; 
	def remove_from_list(self, list_name, position):
		try:
			theList = self.get_list(list_name)
			if theList is False: 
				return False
			list_len = self.get_list_length(list_name)
			if list_len == 0:
				self.log_message("csslog: Nothing to delete from list '" + str(list_name) + "' as it's already empty")
				return
			if position > list_len:
				self.log_message("csslog: Custom list '" + str(list_name) + "' does not contain " + str(position) + " items")
				return False
			if position is None: 
				position = list_len
			theList.pop(position)
		except Exception as e: 
			self.log_message('csslog: There was an error in "remove_from_list", ' + str(e))
			return False; 
	def clear_list(self, list_name):
		try:
			theList = self.get_list(list_name)
			if theList is False: 
				return False
			del theList[:] 
		except Exception as e: 
			self.log_message('csslog: There was an error in "clear_list", ' + str(e))
			return False; 
	def get_num_of_tracks(self, track_slug):
		try:
			s = "self.song()." + track_slug
			s = eval(s)
			return len(s)
		except: 
			self.log_message('There was an error in get_num_of_tracks()')
			return -1
	def get_num_of_scenes(self):
		try:
			s = "self.song().scenes"
			s = eval(s)
			return len(s)
		except: 
			self.log_message('There was an error in get_num_of_scenes()')
			return -1
	def get_num_of_devices(self, track_slug):
		try:
			s = "self.song()." + track_slug + ".devices"
			s = eval(s)
			return len(s)
		except: 
			self.log_message('There was an error in get_num_of_devices()')
			return -1
	def get_selected_track_num(self):
		track = self.song().view.selected_track
		track = self.tuple_index(self.song().visible_tracks, track)
		return track
	def get_selected_scene_num(self):
		scene = self.song().view.selected_scene
		scene = self.tuple_index(self.song().scenes, scene)
		return scene
	def get_selected_device_num(self, track_slug):
		try:
			device_list = "self.song()." + track_slug + ".devices" 
			selected_device = "self.song()." + track_slug + ".view.selected_device" 
			s = self.tuple_index(eval(device_list), eval(selected_device))
			if(s == False and s != 0):
				s = -1
			return s
		except:
			self.log_message('csslog: There was an error in get_num_of_devices()')
			return -1
	def get_active_mode_id(self):
		global active_mode
		return active_mode
	def get_sessbox_track_offset(self):
		if hasattr(self, '_session') and self._session is not None:
			return self._session._track_offset
		else:
			return -1
	def get_sessbox_scene_offset(self):
		if hasattr(self, '_session') and self._session is not None:
			return self._session._scene_offset
		else:
			return -1
	def get_sessbox_last_track_number(self):
		if hasattr(self, '_session') and self._session is not None:
			last_track = self._session._track_offset + self._session.width()
			return last_track
		else:
			return -1
	def get_sessbox_last_scene_number(self):
		if hasattr(self, '_session') and self._session is not None:
			last_scene = self._session._scene_offset + self._session.height()
			return last_scene
		else:
			return -1
	def get_sessbox_width(self):
		if hasattr(self, '_session') and self._session is not None:
			return self._session.width()
		else:
			return -1
	def get_sessbox_height(self):
		if hasattr(self, '_session') and self._session is not None:
			return self._session.height()
		else:
			return -1
	def get_sessbox_is_active(self):
		if hasattr(self, '_session') and self._session is not None:
			return True
		else:
			return False
	def set_highlighted_track(self, n):
		self.song().view.selected_track = self.song().visible_tracks[n]
	def set_highlighted_scene(self, n):
		self.song().view.selected_scene = self.song().scenes[n]
	def set_sessionbox_offsets(self, track_offset, scene_offset):
		if hasattr(self, '_session') and self._session is not None:
			self._session.set_offsets(track_offset, scene_offset)
			self._set_session_highlight( self._session.track_offset(), self._session.scene_offset(), self._session.width(), self._session.height(), True)
	def set_sessionbox_combo_mode(self, combo):
		if hasattr(self, '_session') and self._session is not None:
			if combo == True:
				self._session._link
			elif combo == False:
				self._session._unlink
	def _quantizeDict(self):
		grid_setting = str(self.song().view.highlighted_clip_slot.clip.view.grid_quantization)
		is_it_triplet = self.song().view.highlighted_clip_slot.clip.view.grid_is_triplet
		if (is_it_triplet is True):
			grid_setting += "_triplet"
		RecordingQuantization = Live.Song.RecordingQuantization
		quantDict = {}
		quantDict["g_thirtysecond"] = RecordingQuantization.rec_q_thirtysecond
		quantDict["g_sixteenth"] = RecordingQuantization.rec_q_sixtenth
		quantDict["g_eighth"] = RecordingQuantization.rec_q_eight
		quantDict["g_quarter"] = RecordingQuantization.rec_q_quarter
		quantDict["g_eighth_triplet"] = RecordingQuantization.rec_q_eight_triplet
		quantDict["g_sixteenth_triplet"] = RecordingQuantization.rec_q_sixtenth_triplet
		return quantDict[grid_setting];
	def _arm_follow_track_selection(self):
		for track in self.song().tracks:
			if track.can_be_armed:
				track.arm = False
		if self.song().view.selected_track.can_be_armed:
			self.song().view.selected_track.arm = True
	def turn_inputs_off(self): 
		send_feedback = False
		if hasattr(self, "global_feedback"): 
			if self.global_feedback == "custom":
				if self.global_feedback_active == True: 
					send_feedback = True
			elif hasattr(self, "controller_LED_on") and hasattr(self, "controller_LED_off"):
				send_feedback = True
		if send_feedback == True: 
			for input_name in self.input_map:
				input_ctrl = getattr(self, input_name)
				input_ctrl.send_value(self.led_off)
	def feedback_brain(self, obj):
		cnfg = obj.copy() 
		if cnfg["module"].startswith("self.c_mod"):
			cnfg["module"] = eval(cnfg["module"])
		try:
			param = eval(cnfg["module"])
		except:
			self.feedback_handler(cnfg, self.global_LED_off)
			return
		try:
			method_to_call = getattr(self, cnfg["feedback_brain"])
			method_to_call(cnfg)
		except:
			return 
	def feedback_bool(self, feedback_to):
		control =   eval("self." + str(feedback_to["attached_to"]))
		param =     eval(feedback_to["module"] + "." + feedback_to["ui_listener"])
		ctrl_on =   self.feedback_which_ctrl_on_off(feedback_to, "on")
		ctrl_off =  self.feedback_which_ctrl_on_off(feedback_to, "off")
		if(feedback_to["mapping_type"] == "Mute"):
			if param == False:
				send_val = ctrl_on
			elif param == True:
				send_val = ctrl_off
		else: 
			if param == True:
				send_val = ctrl_on
			elif param == False:
				send_val = ctrl_off
		self.feedback_handler(feedback_to, send_val)
	def feedback_on_off(self, feedback_to):
		param =     eval(feedback_to["module"])
		ctrl_on =   self.feedback_which_ctrl_on_off(feedback_to, "on")
		ctrl_off =  self.feedback_which_ctrl_on_off(feedback_to, "off")
		param_value = round(param.value,2) 
		mapping_type = str(feedback_to["mapping_type"])
		if "maximum" in feedback_to and "minimum" in feedback_to:
			max_val = feedback_to["maximum"]
			min_val = feedback_to["minimum"]
		elif hasattr(param, "max") and hasattr(param, "min"): 
			max_val = param.max
			max_val = round(max_val,2)
			min_val = param.min
			min_val = round(min_val,2)
		else: 
			self.log_message(str(param) + " does not have a max/min param")
			return
		send_val = None
		if param_value > min_val:
			send_val = ctrl_on
		else:
			send_val = ctrl_off
		if send_val is not None:
			self.feedback_handler(feedback_to, send_val)
		else: 
			return
	def feedback_increment(self, feedback_to):
		control =   eval("self." + str(feedback_to["attached_to"]))
		param =     eval(feedback_to["module"])
		mapping_type = str(feedback_to["mapping_type"])
		ctrl_on =   self.feedback_which_ctrl_on_off(feedback_to, "on")
		ctrl_off =  self.feedback_which_ctrl_on_off(feedback_to, "off")
		snapping = feedback_to["snap_to"]
		mapping_type = str(feedback_to["mapping_type"])
		if "maximum" in feedback_to and "minimum" in feedback_to:
			max_val = feedback_to["maximum"]
			min_val = feedback_to["minimum"]
			if mapping_type != "On/Off":
				max_val = self.percent_as_value(feedback_to["module"], feedback_to["maximum"])
				min_val = self.percent_as_value(feedback_to["module"], feedback_to["minimum"])
		elif hasattr(param, "max") and hasattr(param, "min"): 
			max_val = param.max
			min_val = param.min
		else: 
			self.log_message(str(param) + " does not have a max/min param")
			return
		if snapping == False and param.value < min_val:
			send_val = ctrl_off
		elif param.value < max_val: 
			send_val = ctrl_on
		else: 
			send_val = ctrl_off
		self.feedback_handler(feedback_to, send_val)
	def feedback_decrement(self, feedback_to):
		control =   eval("self." + str(feedback_to["attached_to"]))
		param =     eval(feedback_to["module"])
		mapping_type = str(feedback_to["mapping_type"])
		ctrl_on =   self.feedback_which_ctrl_on_off(feedback_to, "on")
		ctrl_off =  self.feedback_which_ctrl_on_off(feedback_to, "off")
		snapping = feedback_to["snap_to"]
		if "maximum" in feedback_to and "minimum" in feedback_to:
			max_val = feedback_to["maximum"]
			min_val = feedback_to["minimum"]
			if mapping_type != "On/Off":
				max_val = self.percent_as_value(feedback_to["module"], feedback_to["maximum"])
				min_val = self.percent_as_value(feedback_to["module"], feedback_to["minimum"])
		elif hasattr(param, "max") and hasattr(param, "min"): 
			max_val = param.max
			min_val = param.min
		else: 
			self.log_message(str(param) + " does not have a max/min param")
			return
		if snapping == False and param.value > max_val:
			send_val = ctrl_off
		elif param.value > min_val: 
			send_val = ctrl_on
		else: 
			send_val = ctrl_off
		self.feedback_handler(feedback_to, send_val)
	def feedback_which_ctrl_on_off(self, feedback_to, on_off):
		if feedback_to["LED_feedback"] == "default":
			ctrl_on = self.led_on
			ctrl_off = self.led_off
		elif feedback_to["LED_feedback"] == "custom":
			if feedback_to["ctrl_type"] == "on/off" or feedback_to["ctrl_type"] == "increment" or feedback_to["ctrl_type"] == "decrement":
				ctrl_on = feedback_to["LED_on"]
				ctrl_off = feedback_to["LED_off"]
			elif feedback_to["ctrl_type"] == "absolute" or feedback_to["ctrl_type"] == "relative":
				ctrl_on = feedback_to["enc_first"]
				ctrl_off = feedback_to["enc_second"]
		if on_off == "on":
			value = ctrl_on
		elif on_off == "off":
			value = ctrl_off
		return value;
	def feedback_range(self, feedback_to):
		if feedback_to['ctrl_type'] == "on/off":
			self.feedback_on_off(feedback_to)
		elif feedback_to['ctrl_type'] == "increment":
			self.feedback_increment(feedback_to)
		elif feedback_to['ctrl_type'] == "decrement":
			self.feedback_decrement(feedback_to)
		elif feedback_to['ctrl_type'] == "relative":
			feedback_to['enc_second'] = 127 
			feedback_to['enc_first'] = 0
		control =   eval("self." + str(feedback_to["attached_to"]))
		param =     eval(feedback_to["module"])
		if "minimum" in feedback_to and feedback_to['minimum'] != 0:
			feedback_to["minimum"] = ((param.max - param.min) * feedback_to['minimum']) / 100 + param.min
		else:
			feedback_to["minimum"] = param.min
		if "maximum" in feedback_to and feedback_to['maximum'] != 100:
			feedback_to["maximum"] = ((param.max - param.min) * feedback_to['maximum']) / 100 + param.min
		else:
			feedback_to["maximum"] = param.max
		feedback_to["distance"] = feedback_to["maximum"] - feedback_to["minimum"] 
		feedback_to["steps"] = feedback_to['enc_second'] - feedback_to['enc_first']
		feedback_to["speed"] = feedback_to["distance"] / feedback_to["steps"] 
		velocity_seq = self._velocity_seq(feedback_to)
		step_values = self.step_values(feedback_to) 
		combined_dict = dict(zip(velocity_seq, step_values))
		val = round(param.value, feedback_to["decimal_places"])
		closest_key = min(combined_dict, key=lambda k: abs(combined_dict[k] - val))
		percentage_of_ctrl_range = closest_key
		self.feedback_handler(feedback_to, percentage_of_ctrl_range)
	def feedback_a_b_crossfade_assign(self, feedback_to):
		parent_track = feedback_to['parent_track']
		if parent_track.startswith("self.get_modifier_value"):
			parent_track = eval(parent_track)
		assigned_val = eval(str(parent_track) + ".mixer_device.crossfade_assign")
		if(assigned_val == 0):
			send_val = feedback_to["LED_on"]
		elif(assigned_val == 1):
			send_val = feedback_to["LED_off"]
		elif(assigned_val == 2):
			send_val = feedback_to["LED_assigned_to_b"]
		else: 
			send_val = 0
		self.feedback_handler(feedback_to, send_val)
	def feedback_handler(self, config, send_val):
		send_feedback = False
		if "LED_feedback" in config:
			if config["LED_feedback"] == "custom": 
				if config["LED_feedback_active"] == "1" or config["LED_feedback_active"] == "true": 
					send_feedback = True
			elif hasattr(self, "global_feedback"): 
				if self.global_feedback == "custom":
					if self.global_feedback_active == True: 
						send_feedback = True
				elif hasattr(self, "controller_LED_on") and hasattr(self, "controller_LED_off"):
					send_feedback = True
			if send_feedback == True: 
				if config["LED_feedback"] == "custom":
					for item in config["LED_send_feedback_to_selected"]:
						self.css_send_midi(str(item), send_val)
				else: 
					control = eval("self." + str(config["attached_to"]))
					self.css_send_midi(str(control.led_fb_str), send_val)
			else:
				self.log("feedback_handler says 'not sending led feedback'")
	def css_send_midi(self, control, velocity):
		velocity = int(velocity)
		parts = str(control).split('_')
		midi_type = parts[1]
		channel = int(parts[3])
		value = int(parts[5])
		if midi_type == 'cc':
			status_byte = 0xB0 | channel
		elif midi_type == 'note':
			status_byte = 0x90 | channel
		else:
		    self.log_message("csslog: css_send_midi error: Unknown MIDI type " + midi_type)
		midi_bytes = (status_byte | channel, value, velocity)
		self._send_midi(midi_bytes)
	def sess_highlight_banking_calculate(self, feedback_to, num_of_tracks_scenes, offset_is_at):			
		if feedback_to['ctrl_type'] == "absolute" or feedback_to['ctrl_type'] == "relative":
			percentage_control_is_at = offset_is_at / num_of_tracks_scenes * 100
			velocity_val = 127 * (percentage_control_is_at / 100)
		elif feedback_to['ctrl_type'] == "on/off" or feedback_to['ctrl_type'] == "increment":
			if offset_is_at < num_of_tracks_scenes:
				velocity_val = feedback_to["LED_on"]
			else:
				velocity_val = feedback_to["LED_off"]
		elif feedback_to['ctrl_type'] == "decrement":
			if offset_is_at == 0:
				velocity_val = feedback_to["LED_off"]
			else:
				velocity_val = feedback_to["LED_on"]			
		self.feedback_handler(feedback_to, velocity_val)
	def feedback_scroll_mode_selector(self, feedback_to):
		global active_mode
		num_of_tracks_scenes = len(self.modes) - 1
		count = 0
		for mode_num in list(self.modes.values()):
			if mode_num == active_mode:
				offset_is_at = count
				break
			count += 1
		self.sess_highlight_banking_calculate(feedback_to, num_of_tracks_scenes, offset_is_at)
	def feedback_scroll_mode_selector_select(self, feedback_to):
		global active_mode
		mode_to_select = int(feedback_to["func_arg"])
		if int(active_mode) == mode_to_select:
			self.feedback_handler(feedback_to, feedback_to["LED_on"])
		else:
			self.feedback_handler(feedback_to, feedback_to["LED_off"])
	def feedback_param_banking_select(self, feedback_to):
		if type(feedback_to["banking_number"]) == str:
			banking_number = self.get_modifier_value(feedback_to["banking_number"])
		else: 
			banking_number = feedback_to["banking_number"] - 1 
		parent_device_id = feedback_to["parent_device_id"]
		offset_is_at = getattr(self, "device_id_" + str(parent_device_id) + "_active_bank")
		if banking_number == offset_is_at:
			self.feedback_handler(feedback_to, feedback_to["LED_on"])
		else:
			self.feedback_handler(feedback_to, feedback_to["LED_off"])
	def feedback_param_banking(self, feedback_to):
		self.log_message("scroll banking fired")
		parent_device_id = feedback_to["parent_device_id"]
		bank_array = getattr(self, "device_id_" + str(parent_device_id) + "_banks")
		num_of_tracks_scenes = len(bank_array) - 1
		offset_is_at = getattr(self, "device_id_" + str(parent_device_id) + "_active_bank")
		self.sess_highlight_banking_calculate(feedback_to, num_of_tracks_scenes, offset_is_at)
	def feedback_highlight_nav_select(self, feedback_to):
		tracks_or_scenes = feedback_to["tracks_scenes"]
		tracks_scene_num = int(feedback_to["highlight_number"])
		if tracks_or_scenes == "tracks":
			offset_is_at = int(self.selected_track_idx()) - 1
		elif tracks_or_scenes == "scenes":
			offset_is_at = int(self.selected_scene_idx()) - 1
		elif tracks_or_scenes == "relative tracks":
			offset_is_at = int(self.selected_track_idx()) - int(self.get_sessbox_track_offset())
			offset_is_at = offset_is_at - 1
		elif tracks_or_scenes == "relative scenes":
			offset_is_at = int(self.selected_scene_idx()) - int(self.get_sessbox_scene_offset())
			offset_is_at = offset_is_at - 1
		if tracks_scene_num == offset_is_at:
			self.feedback_handler(feedback_to, feedback_to["LED_on"])
		else:
			self.feedback_handler(feedback_to, feedback_to["LED_off"])
	def feedback_highlight_nav(self, feedback_to):
		tracks_or_scenes = feedback_to["tracks_scenes"]
		if tracks_or_scenes == "tracks":
			offset_is_at = int(self.selected_track_idx()) - 1
			all_tracks = list(self.song().visible_tracks) + list(self.song().return_tracks) + [self.song().master_track]
			num_of_tracks_scenes = int(len(all_tracks)) - 1
		elif tracks_or_scenes == "scenes":
			offset_is_at = int(self.selected_scene_idx()) - 1
			num_of_tracks_scenes = int(len(self.song().scenes)) - 1
		elif tracks_or_scenes == "relative tracks":
			offset_is_at = int(self.selected_track_idx()) - int(self.get_sessbox_track_offset())
			offset_is_at = offset_is_at - 1
			num_of_tracks_scenes = int(self.get_sessbox_width())
			num_of_tracks_scenes = num_of_tracks_scenes - 1
		elif tracks_or_scenes == "relative scenes":
			offset_is_at = int(self.selected_scene_idx()) - int(self.get_sessbox_scene_offset())
			offset_is_at = offset_is_at - 1
			num_of_tracks_scenes = int(self.get_sessbox_height())
			num_of_tracks_scenes = num_of_tracks_scenes - 1
		self.sess_highlight_banking_calculate(feedback_to, num_of_tracks_scenes, offset_is_at)
	def feedback_sessbox_nav_select(self, feedback_to):
		try:
			self._session
		except:
			self.show_message("There's no Session Box to select for feedback")
			return
		tracks_scene_num = int(feedback_to["highlight_number"])
		tracks_or_scenes = feedback_to["tracks_scenes"]
		if tracks_or_scenes == "tracks":
			offset_is_at = int(self._session.track_offset())
		elif tracks_or_scenes == "scenes":
			offset_is_at = int(self._session.scene_offset())
		if tracks_scene_num == offset_is_at:
			self.feedback_handler(feedback_to, feedback_to["LED_on"])
		else:
			self.feedback_handler(feedback_to, feedback_to["LED_off"])
	def feedback_sessbox_nav(self, feedback_to):
		try:
			self._session
		except:
			self.show_message("There's no active Session Box, so feedback cannot be sent")
			return
		tracks_or_scenes = feedback_to["tracks_scenes"]
		if tracks_or_scenes == "tracks":
			offset_is_at = int(self._session.track_offset())
			num_of_tracks_scenes = (len(self.song().visible_tracks) + len(self.song().return_tracks)) - self._session.width()
		elif tracks_or_scenes == "scenes":
			offset_is_at = int(self._session.scene_offset())
			num_of_tracks_scenes = int(len(self.song().scenes)) - 1
		self.sess_highlight_banking_calculate(feedback_to, num_of_tracks_scenes, offset_is_at)
	def feedback_tempo(self, feedback_to):
		control =   eval("self." + str(feedback_to["attached_to"]))
		param =     eval(feedback_to["module"])
		ctrl_min =  feedback_to["minimum"]
		ctrl_max =  feedback_to["maximum"]
		ctrl_type = feedback_to["ctrl_type"]
		ctrl_first = feedback_to["enc_first"]
		ctrl_last = feedback_to["enc_second"]
		default_ctrl_first = 0 
		default_ctrl_last = 127 
		crl_reverse = feedback_to["reverse_mode"]
		param_range = ctrl_max - ctrl_min
		param =     eval(feedback_to["module"] + "." + feedback_to["ui_listener"])
		zero = ctrl_min 
		if param < ctrl_min or param > ctrl_max:
			self.log("tempo is outside ctrl_min / ctrl_max")
		else:
			zerod_param = param - zero 
			percentage_control_is_at = zerod_param / param_range * 100
		ctrl_range = ctrl_last - ctrl_first
		percentage_of_ctrl_range = ctrl_range * percentage_control_is_at / 100 + ctrl_first
		if crl_reverse == True:
			percentage_of_ctrl_range = ctrl_range - percentage_of_ctrl_range
		self.feedback_handler(feedback_to, percentage_of_ctrl_range)
	def mode_device_bank_leds(self, mode_id):
		config_map = "mode_" + str(mode_id) + "_configs_map"
		config_map = getattr(self, config_map)
		for config_name in config_map:
			config = getattr(self, config_name)
			if config["mapping_type"] == "Parameter Bank":
				parent_id = config["parent_json_id"]
				bank_names_array_name = "device_id_" + str(parent_id) + "_banks"
				active_bank_name = "device_id_" + str(parent_id) + "_active_bank"
				bank_names_array = getattr(self, bank_names_array_name)
				active_bank = getattr(self, active_bank_name)
				for index, bank_name in enumerate(bank_names_array):
					if bank_name == config_name:
						if index == active_bank:
							led_on = config["LED_on"]
							self.feedback_handler(config, led_on)
						else: 
							led_off = config["LED_off"]
							self.feedback_handler(config, led_off)
	def bank_led_feedback(self, parent_device_id):
		global active_mode
		device = "device_id_" + str(parent_device_id);
		device_bank_array = getattr(self, device + "_banks")
		active_bank_idx = getattr(self, device + "_active_bank")
		device_bank_params = getattr(self, device + "_bank_parameters_" + str(active_bank_idx))
		for index, val in enumerate(device_bank_array):
			bank_cnfg = getattr(self, val)
			bank_cnfg["LED_feedback"] = "custom"; 
			if index == active_bank_idx:
					if "LED_on" in bank_cnfg:
						led_on = bank_cnfg["LED_on"]
						self.feedback_handler(bank_cnfg, led_on)
			else: 
				if "LED_off" in bank_cnfg:
					led_off = bank_cnfg["LED_off"]
					self.feedback_handler(bank_cnfg, led_off)
		remove_mode = getattr(self, "_remove_mode" + active_mode + "_ui_listeners")
		remove_mode()
		activate_mode = getattr(self, "_mode" + active_mode + "_ui_listeners")
		activate_mode()
		for param in device_bank_params:
			fire_param_feedback = getattr(self, param + "_led_listener")
			fire_param_feedback()
	def reload_led_listeners(self):
		global active_mode
		modesArr = self.modes_arr()
		for mode in modesArr:
			remove_modex_led_listeners = "_remove_mode" + str(mode) + "_led_listeners"
			add_modex_led_listeners = "_mode" + str(mode) + "_led_listeners"
			if hasattr(self, remove_modex_led_listeners):
				mode_to_call = getattr(self, remove_modex_led_listeners)
				mode_to_call()
			if hasattr(self, add_modex_led_listeners):
				mode_to_call = getattr(self, add_modex_led_listeners)
				mode_to_call()
				self.track_feedback()
				self.device_feedback()
		self.refresh_state()
	def modes_arr(self):
		global active_mode
		try:
			active_mode
		except NameError:
			active_mode = None
		modesArr = []
		if active_mode != None:
			modesArr.append(active_mode)
		if hasattr(self, 'global_mode') and self.global_mode[0] and self.global_mode[0] != '':
			if active_mode and str(active_mode) != str(self.global_mode[0]):
				modesArr.append(self.global_mode[0])
		return modesArr;
	def track_feedback(self, mode_id=None):
		global active_mode
		modesArr = self.modes_arr()
		for mode in modesArr:
			config_map = "mode_" + str(mode) + "_configs_map"
			if(hasattr(self, config_map)):
				config_map = getattr(self, config_map)
				selected_track = self.song().view.selected_track
				for config_name in config_map:
					config = getattr(self, config_name)
					if "mapping_type" in config and config["mapping_type"] == "Track":
						led_on = config["LED_on"]
						led_off = config["LED_off"]
						try: 
							track = eval(config["module"])
						except:
							self.feedback_handler(config, led_off)
							return
						if track == selected_track:
							self.feedback_handler(config, led_on)
						else: 
							self.feedback_handler(config, led_off)
	def device_feedback(self, mode_id=None):
		global active_mode
		modesArr = self.modes_arr()
		for mode in modesArr:
			config_map = "mode_" + str(mode) + "_configs_map"
			if(hasattr(self, config_map)):
				config_map = getattr(self, config_map)
				for config_name in config_map:
					config = getattr(self, config_name)
					if "mapping_type" in config and config["mapping_type"] == "Device":
						led_on = config["LED_on"]
						led_off = config["LED_off"]
						try: 
							device = eval(config["module"])
						except:
							self.feedback_handler(config, led_off)
							return
						find = config["module"].find("selected_track")
						if find >= 0: 
							selected_device = self.song().view.selected_track.view.selected_device
							if device == selected_device:
								self.feedback_handler(config, led_on)
							else: 
								self.feedback_handler(config, led_off)
						else:
							for parent_name in config_map:
								parent_config = getattr(self, parent_name)
								if parent_config["json_id"] == config["parent_json_id"]:
									parent_track = parent_config["module"]
									break
							tracks_selected_device = eval(parent_track + ".view.selected_device")
							if device == tracks_selected_device:
								self.feedback_handler(config, led_on)
							else: 
								self.feedback_handler(config, led_off)
	def create_clip_slot_map(self):
		num_of_tracks = int(len(self.song().tracks))
		num_of_scenes = int(len(self.song().scenes))
		for track in range(0,num_of_tracks):
			for scene in range(0,num_of_scenes):
				if(not self.song().tracks[track].clip_slots[scene].has_clip_has_listener(self._on_clip_added_removed)):
					try:
						self.song().tracks[track].clip_slots[scene].add_has_clip_listener(self._on_clip_added_removed)
					except: 
						pass
	def _on_clip_added_removed(self):
		global active_mode
		updated_by = "_on_clip_added_removed"
		self._remove_custom_lom_listeners_handler(active_mode, updated_by)
		self._add_custom_lom_listeners_handler(active_mode, updated_by)
	def _on_selected_track_changed(self):
		global active_mode, prev_active_mode, modes
		self._remove_all_track_device_listeners()
		self.all_track_device_listeners() 
		updated_by = "_on_selected_track_changed"
		self._remove_custom_lom_listeners_handler(active_mode, updated_by)
		self._add_custom_lom_listeners_handler(active_mode, updated_by)
		self.add_selected_chain_listeners() 
		self.reload_led_listeners()
	def _on_track_list_changed(self):
		global active_mode
		self.generate_relative_tracks_dict()
		self._remove_all_track_device_listeners()
		self.all_track_device_listeners() 
		self.create_clip_slot_map() 
		updated_by = "_on_tracks_changed"
		self._remove_custom_lom_listeners_handler(active_mode, updated_by)
		self._add_custom_lom_listeners_handler(active_mode, updated_by)
		self.add_selected_chain_listeners()
		self.reload_led_listeners()
	def _on_selected_scene_changed(self):
		global active_mode, prev_active_mode, modes
		updated_by = "_on_selected_scene_changed"
		self._remove_custom_lom_listeners_handler(active_mode, updated_by)
		self._add_custom_lom_listeners_handler(active_mode, updated_by)
		self.reload_led_listeners()
	def _on_scenes_changed(self):
		global active_mode
		updated_by = "_on_scenes_changed"
		self._remove_custom_lom_listeners_handler(active_mode, updated_by)
		self._add_custom_lom_listeners_handler(active_mode, updated_by)
		self.create_clip_slot_map() 
	def _on_devices_changed(self):
		global active_mode, prev_active_mode, modes
		self._remove_all_track_device_listeners()
		self.all_track_device_listeners() 
		try:
			self.reload_led_listeners()
		except: 
			pass
		updated_by = "_on_devices_changed"
		self._remove_custom_lom_listeners_handler(active_mode, updated_by)
		self._add_custom_lom_listeners_handler(active_mode, updated_by)
		self.add_selected_chain_listeners()
	def _on_selected_device_changed(self):
		global active_mode, prev_active_mode, modes
		updated_by = "_on_selected_device_changed"
		self._remove_custom_lom_listeners_handler(active_mode, updated_by)
		self._add_custom_lom_listeners_handler(active_mode, updated_by)
		try:
			self.reload_led_listeners()
			self.device_feedback()
			self.refresh_state()
		except: 
			pass
	def _on_selected_chain_changed(self, device):
		self.song().view.select_device(device)
	def _on_selected_parameter_changed(self):
		global active_mode
		if(hasattr(self.song().view.selected_parameter, "canonical_parent") and hasattr(self.song().view.selected_parameter.canonical_parent, "type")):
			updated_by = "_on_selected_parameter_changed"
			self._remove_custom_lom_listeners_handler(active_mode, updated_by)
			self._add_custom_lom_listeners_handler(active_mode, updated_by)
		self.reload_led_listeners()
	def _all_tracks_listener(self):
		global active_mode, prev_active_mode, modes
		self.reload_led_listeners()
	def all_track_device_listeners(self):
		numtracks = len(self.song().tracks)
		for index in range(numtracks):
			try:
				self.song().tracks[index].view.add_selected_device_listener(self._on_selected_device_changed)
				self.song().tracks[index].add_devices_listener(self._on_devices_changed)
			except:
				pass
		num_returns = len(self.song().return_tracks)
		for index in range(num_returns):
			try:
				self.song().return_tracks[index].view.add_selected_device_listener(self._on_selected_device_changed)
				self.song().return_tracks[index].add_devices_listener(self._on_devices_changed)
			except:
				pass
		try:
			self.song().master_track.view.add_selected_device_listener(self._on_selected_device_changed)
			self.song().master_track.add_devices_listener(self._on_devices_changed)
		except:
			pass
	def _remove_all_track_device_listeners(self):
		numtracks = len(self.song().tracks)
		for index in range(numtracks):
			try:
				self.song().tracks[index].view.remove_selected_device_listener(self._on_selected_device_changed)
				self.song().tracks[index].remove_devices_listener(self._on_devices_changed)
			except:
				pass
		num_returns = len(self.song().return_tracks)
		for index in range(num_returns):
			try:
				self.song().return_tracks[index].view.remove_selected_device_listener(self._on_selected_device_changed)
				self.song().return_tracks[index].remove_devices_listener(self._on_devices_changed)
			except:
				pass
		try:
			self.song().master_track.view.remove_selected_device_listener(self._on_selected_device_changed)
			self.song().master_track.remove_devices_listener(self._on_devices_changed)
		except:
			pass
	################################################
	############# Extra Functions ##################
	################################################
	def scroll_through_devices(self, cnfg):
		NavDirection = Live.Application.Application.View.NavDirection
		if cnfg["ctrl_type"] == "absolute":
			if self.song().view.selected_track.view.selected_device is not None:
				parent_devices = self.song().view.selected_track.view.selected_device.canonical_parent.devices
				num = len(parent_devices)
				num = num - 1				
				track_slug = "view.selected_track.view.selected_device.canonical_parent"
				device_list = "self.song()." + track_slug + ".devices" 
				selected_device = "self.song().view.selected_track" + ".view.selected_device" 
				selected_index = self.tuple_index(eval(device_list), eval(selected_device))
				controller = getattr(self, cnfg["attached_to"])
				cnfg["value"] = controller.cur_val 					
				cnfg["pre_val"] = controller.pre_val 
				cnfg["takeover_mode"] = "Pickup"
				cnfg["decimal_places"] = 0
				cnfg["steps"] = (cnfg["enc_second"] - cnfg["enc_first"]) 
				cnfg["distance"] = num - 0 
				cnfg["minimum"] = 0
				cnfg["maximum"] = num
				cnfg["distance"] = cnfg["maximum"] - cnfg["minimum"] 
				cnfg["speed"] = cnfg["distance"] / cnfg["steps"] 
				cnfg["current_position"] = selected_index
				cnfg["parameter_value"] = selected_index
				cnfg["step_values"] = self.step_values(cnfg) 
				cnfg["velocity_seq"] = self._velocity_seq(cnfg)
				cnfg["step_num"] = cnfg["velocity_seq"].index(cnfg["value"]) 
				cnfg["step_value"] = cnfg["step_values"][cnfg["step_num"]] 
				new_val = self.pickup(cnfg)
				device = self.song().view.selected_track.view.selected_device.canonical_parent.devices[new_val]
				self.song().view.select_device(device)
				if "device_nav_collapse_devices" in cnfg and cnfg["device_nav_collapse_devices"] == "1":
					for index in range(num + 1):
						parent_devices[index].view.is_collapsed = True
					device.view.is_collapsed = False
			return
		elif cnfg["ctrl_type"] == "relative":
			if cnfg["enc_first"] == cnfg["value"]:
				goto = "left"
				times = 1;
			elif cnfg["enc_second"] == cnfg["value"]:
				goto = "right"
				times = 1;
		elif cnfg["ctrl_type"] == "on/off": 
			if cnfg["should_it_fire"] == 3:
					goto = "right"
			elif cnfg["should_it_fire"] == 2:
					goto = "right"
		elif cnfg["ctrl_type"] == "increment":
			if cnfg["should_it_fire"] == 3:
				goto = "right"
				times = 1;
		elif cnfg["ctrl_type"] == "decrement":
			if cnfg["should_it_fire"] == 3:
				goto = "left"
				times = 1;
		if goto == "right":
			for x in range(0, times):
				self._scroll_device_chain(NavDirection.right)
		elif goto == "left":
			for x in range(0, times):
				self._scroll_device_chain(NavDirection.left)
	def _scroll_device_chain(self, direction):
		view = self.application().view
		if not view.is_view_visible('Detail') or not view.is_view_visible('Detail/DeviceChain'):
			view.show_view('Detail')
			view.show_view('Detail/DeviceChain')
		else:
			view.scroll_view(direction, 'Detail/DeviceChain', False)
	def selected_device_idx(self):
		self._device = self.song().view.selected_track.view.selected_device
		return self.tuple_index(self.song().view.selected_track.devices, self._device)
	def selected_track_idx(self):
		self._track = self.song().view.selected_track
		all_tracks = list(self.song().visible_tracks) + list(self.song().return_tracks) + [self.song().master_track]
		self._track_num = self.tuple_index(all_tracks, self._track) + 1
		return self._track_num
	def selected_scene_idx(self):
		self._scene = self.song().view.selected_scene
		self._scene_num = self.tuple_index(self.song().scenes, self._scene)
		self._scene_num = self._scene_num + 1
		return self._scene_num
	def tuple_index(self, tuple, obj):
		for i in range(0, len(tuple)):
			if (tuple[i] == obj):
				return i
		return(False)
	def select_a_device(self, cnfg):
		parent_track = cnfg["parent_track"]
		device_chain = cnfg["device_chain"]
		if parent_track.startswith("self.get_modifier_value"):
			parent_track = eval(parent_track)
		if device_chain.startswith("self.get_modifier_value"):
			device_chain = eval(device_chain)
		chain_selector = "self.song().view.selected_track" + device_chain
		try:
			self.song().view.selected_track = eval(parent_track)
			try:
				self.song().view.select_device(eval(chain_selector))
			except IndexError:
				self.show_message("Device you are trying to select does not exist on track.") 
		except IndexError:
			self.show_message("Track does not exist for the device you are selecting.")
	def a_b_crossfade_assign(self, cnfg):
		assignment_type = cnfg['assignment_type']; 
		if(assignment_type == "Scroll"):
			goto = self.scroll_a_b_assign(cnfg);
			if goto > 2:
				goto = 2
		elif cnfg["should_it_fire"] == 3:
			if assignment_type == "Select A":
				goto = 0
			elif assignment_type == "Select None":
				goto = 1
			elif assignment_type == "Select B":
				goto = 2
			else:
				goto = 0
		parent_track = cnfg["parent_track"]
		if parent_track.startswith("self.get_modifier_value"):
			parent_track = eval(parent_track)
		setattr(eval(str(parent_track) + ".mixer_device"), "crossfade_assign", goto)
	def scroll_a_b_assign(self, cnfg):
		should_it_fire = self.should_it_fire(cnfg)
		if(int(should_it_fire) < 1):
			return
		parent_track = cnfg["parent_track"]
		if parent_track.startswith("self.get_modifier_value"):
			parent_track = eval(parent_track)
		current_assigned_value = eval(str(parent_track) + ".mixer_device.crossfade_assign")
		goto = current_assigned_value
		length = 3
		if cnfg["ctrl_type"] == "absolute":
			divider = (cnfg["enc_second"] - cnfg["enc_first"]) / length
			goto = int(cnfg["value"] / divider) 
			if cnfg["reverse_mode"] is True:
				if(goto >= 2):
					goto = 0
				elif(goto == 0):
					goto = 2
			goto = int(goto)
		elif cnfg["ctrl_type"] == "relative":
			if cnfg["enc_first"] == cnfg["value"] and current_assigned_value > 0:
				goto = current_assigned_value - 1
			elif cnfg["enc_second"] == cnfg["value"] and current_assigned_value < 2:
				goto = current_assigned_value + 1
		elif cnfg["ctrl_type"] == "on/off": 
			if current_assigned_value < 2:
				goto = current_assigned_value + 1
			elif current_assigned_value >= 2:
				goto = 0
		elif cnfg["ctrl_type"] == "increment":
			if current_assigned_value < 2:
				goto = current_assigned_value + 1
			else: 
				goto = current_assigned_value
		elif cnfg["ctrl_type"] == "decrement":
			if current_assigned_value > 0:
				goto = current_assigned_value - 1
			else: 
				goto = current_assigned_value
		return int(goto)
	def scroll_highlight(self, cnfg):
		if cnfg["tracks_scenes"] in ("tracks", "relative tracks"):
			all_tracks = list(self.song().visible_tracks) + list(self.song().return_tracks) + [self.song().master_track]
			length = len(all_tracks)
			if cnfg["tracks_scenes"] == 'relative tracks' and (hasattr(self, '_session') and self._session is not None):
				length = self._session.width() - 1
			selected = self.selected_track_idx() - 1
		elif cnfg["tracks_scenes"] in ("scenes", "relative scenes"):
			length = len(self.song().scenes)
			if cnfg["tracks_scenes"] == 'relative scenes' and (hasattr(self, '_session') and self._session is not None):
				length = self._session.height() - 1
			selected = self.selected_scene_idx() - 1
		else: 
			self.log("scroll_highlight error, tracks_scenes was not set")
		if cnfg["ctrl_type"] == "absolute":
			divider = (cnfg["enc_second"] - cnfg["enc_first"]) / length
			if cnfg["reverse_mode"] is False:
				goto = cnfg["value"] / divider
			elif cnfg["reverse_mode"] is True:
				goto = (divider * length) / cnfg["value"]
			goto = int(goto)
		elif cnfg["ctrl_type"] == "relative":
			if cnfg["enc_first"] == cnfg["value"]:
				goto = selected  - cnfg['move_by']
			elif cnfg["enc_second"] == cnfg["value"]:
				goto = selected + cnfg['move_by']
		elif cnfg["ctrl_type"] == "on/off": 
			if cnfg["switch_type"] == "momentary": 
				if selected == length - 1:
					goto = 0
				else: 
					goto = length - 1
			elif cnfg["should_it_fire"] == 3:
				goto = length - 1
			elif cnfg["should_it_fire"] == 2:
				goto = 0
		elif cnfg["ctrl_type"] == "increment":
			goto = selected + cnfg['move_by']
		elif cnfg["ctrl_type"] == "decrement":
			goto = selected - cnfg['move_by']
		if goto <= length and goto >= 0 and goto != selected:
			cnfg["highlight_number"] = goto
			self.select_highlight(cnfg)
	def select_sess_offset(self, cnfg):
		try:
			self._session
		except:
			self.show_message("There's no Session Box to select, buddy.")
			return
		tracks_scenes = cnfg["tracks_scenes"]
		track_offset = self._session.track_offset()
		scene_offset = self._session.scene_offset()
		if type(cnfg["highlight_number"]) == str:
			change_to = self.get_modifier_value(cnfg["highlight_number"])
		else: 
			change_to = cnfg["highlight_number"] 
		if tracks_scenes == "tracks":
			track_offset = change_to
		elif tracks_scenes == "scenes":
			scene_offset = change_to
		try:
			self._session.set_offsets(track_offset, scene_offset)
			self._session._reassign_scenes()
			self._set_session_highlight( self._session.track_offset(), self._session.scene_offset(), self._session.width(), self._session.height(), True)
			self.refresh_state()
			modesArr = self.modes_arr()
			for mode in modesArr:
				self.call_script_reaction(mode, None, 'session_box_position')
		except:
			self.show_message("unable to move session box there.")
	def scroll_sess_offset(self, cnfg):
		try:
			self._session
		except:
			self.show_message("There's no Session Box to scroll, buddy.")
			return
		tracks_scenes = cnfg["tracks_scenes"]
		track_offset = self._session.track_offset()
		scene_offset = self._session.scene_offset()
		if cnfg["tracks_scenes"] == "tracks":
			length = len(self.song().visible_tracks) + len(self.song().return_tracks) - self._session.width()
			selected = track_offset
		elif cnfg["tracks_scenes"] == "scenes":
			length = len(self.song().scenes)
			selected = scene_offset
		else: 
			self.log("scroll_sess_offset error, tracks_scenes was not set")
		if cnfg["ctrl_type"] == "absolute":
			divider = (cnfg["enc_second"] - cnfg["enc_first"]) / length
			goto = cnfg["value"] / divider
			if cnfg["reverse_mode"] is True:
				goto = length - goto
			goto = int(goto)
		elif cnfg["ctrl_type"] == "relative":
			if cnfg["enc_first"] == cnfg["value"]:
				goto = selected - cnfg['move_by']
			elif cnfg["enc_second"] == cnfg["value"]:
				goto = selected + cnfg['move_by']
		elif cnfg["ctrl_type"] == "on/off": 
			if cnfg["switch_type"] == "momentary": 
				if selected == length:
					goto = 0
				else: 
					goto = length
			elif cnfg["should_it_fire"] == 3:
				goto = length - 1
			elif cnfg["should_it_fire"] == 2:
				goto = 0
		elif cnfg["ctrl_type"] == "increment":
			goto = selected + cnfg['move_by']
		elif cnfg["ctrl_type"] == "decrement":
			goto = selected - cnfg['move_by']
		if(goto < 0):
			goto = 0
		if cnfg["tracks_scenes"] == "tracks":
			track_offset = goto
		elif cnfg["tracks_scenes"] == "scenes":
			scene_offset = goto
		try:
			self._session.set_offsets(track_offset, scene_offset)
			self._session._reassign_scenes()
			self._set_session_highlight( self._session.track_offset(), self._session.scene_offset(), self._session.width(), self._session.height(), True)
			self.refresh_state()
			modesArr = self.modes_arr()
			for mode in modesArr:
				self.call_script_reaction(mode, None, 'session_box_position')
		except:
			self.show_message("unable to move session box there.")
	def get_tracks_array(self):
		tracks_array = []
		count = 0
		for index in range(len(self.song().visible_tracks)):
			tracks_array.append(self.song().visible_tracks[count])
			count = count+1
		count = 0
		for index in range(len(self.song().return_tracks)): 
			tracks_array.append(self.song().return_tracks[count])
			count = count+1
		tracks_array.append(self.song().master_track)
		return tracks_array
	def select_highlight(self, cnfg):
		tracks_scenes = cnfg["tracks_scenes"]
		if type(cnfg["highlight_number"]) == str:
			change_to = self.get_modifier_value(cnfg["highlight_number"])
		else:
			if tracks_scenes == 'relative tracks' and (hasattr(self, '_session') and self._session is not None):
				change_to = self.get_sessbox_track_offset() + cnfg["highlight_number"]
			elif tracks_scenes == 'relative scenes' and (hasattr(self, '_session') and self._session is not None):
				change_to = self.get_sessbox_scene_offset() + cnfg["highlight_number"]
			else: 
				change_to = cnfg["highlight_number"]
		if tracks_scenes in ("tracks", "relative tracks"):
			num_of_tracks_scenes = len(self.song().visible_tracks) + len(self.song().return_tracks) + 1
		elif tracks_scenes in ("scenes", "relative scenes"):
			num_of_tracks_scenes = len(self.song().scenes)
		if num_of_tracks_scenes >= change_to + 1:
			if tracks_scenes in ("tracks", "relative tracks"):
				all_tracks_arr = self.get_tracks_array()
				self.song().view.selected_track = all_tracks_arr[change_to]
			elif tracks_scenes in ("scenes", "relative scenes"):
				self.song().view.selected_scene = self.song().scenes[change_to]
	def session_box(self, num_tracks, num_scenes, track_offset, scene_offset, clips, stop_all, stop_tracks, scene_launch, feedbackArr, combination_mode):
		self._session = SessionComponent(num_tracks, num_scenes, enable_skinning=True)
		self._session.set_mixer(self.mixer)
		self._session.set_offsets(track_offset, scene_offset)
		self._session.add_offset_listener(self._on_session_offset_changes, identify_sender= False)
		self._session._reassign_scenes()
		self._set_session_highlight( self._session.track_offset(), self._session.scene_offset(), self._session.width(), self._session.height(), True)
		if clips: 
			self._grid = ButtonMatrixElement(rows=[clips[(index*num_tracks):(index*num_tracks)+num_tracks] for index in range(num_scenes)])
			self._session.set_clip_launch_buttons(self._grid)
		if stop_all:
			self._session.set_stop_all_clips_button(stop_all)
		if stop_tracks:
			self._session.set_stop_track_clip_buttons(tuple(stop_tracks))
		if scene_launch:
			scene_launch_buttons = ButtonMatrixElement(rows=[scene_launch])
			self._session.set_scene_launch_buttons(scene_launch_buttons)
			if feedbackArr["StopClipTriggered"] is not None:
				self._session.set_stop_clip_triggered_value(feedbackArr["StopClipTriggered"])
			if feedbackArr["StopClip"] is not None: 
				self._session.set_stop_clip_value(feedbackArr["StopClip"])
		for scene_index in range(num_scenes):
			scene = self._session.scene(scene_index)
			if feedbackArr["Scene"] is not None:
				scene.set_scene_value(feedbackArr["Scene"])
			if feedbackArr["NoScene"] is not None:
				scene.set_no_scene_value(feedbackArr["NoScene"])
			if feedbackArr["SceneTriggered"] is not None:
				scene.set_triggered_value(feedbackArr["SceneTriggered"])
			for track_index in range(num_tracks):
				clip_slot = scene.clip_slot(track_index)
				if feedbackArr["ClipTriggeredPlay"] is not None: 
					clip_slot.set_triggered_to_play_value(feedbackArr["ClipTriggeredPlay"])
				if feedbackArr["ClipTriggeredRecord"] is not None: 
					clip_slot.set_triggered_to_record_value(feedbackArr["ClipTriggeredRecord"])
				if feedbackArr["RecordButton"] is not None:
					clip_slot.set_record_button_value(feedbackArr["RecordButton"])
				if feedbackArr["ClipStopped"] is not None:
					clip_slot.set_stopped_value(feedbackArr["ClipStopped"])
				if feedbackArr["ClipStarted"] is not None:
					clip_slot.set_started_value(feedbackArr["ClipStarted"])
				if feedbackArr["ClipRecording"] is not None:
					clip_slot.set_recording_value(feedbackArr["ClipRecording"])
			for index in range(len(stop_tracks)):
				stop_track_button = stop_tracks[index]
				if feedbackArr["StopTrackPlaying"] is not None and feedbackArr["StopTrackStopped"] is not None:
					stop_track_button.set_on_off_values(feedbackArr["StopTrackPlaying"], feedbackArr["StopTrackStopped"])
			if stop_all:
				if feedbackArr["StopAllOn"] is not None and feedbackArr["StopAllOff"] is not None:
					stop_all.set_on_off_values(feedbackArr["StopAllOn"], feedbackArr["StopAllOff"])
		if combination_mode == "on":
			self._session._link()
		self.refresh_state()
	def _on_session_offset_changes(self):
		global active_mode
		updated_by = "_on_session_offset_changes"
		self.generate_relative_tracks_dict()
		self._remove_custom_lom_listeners_handler(active_mode, updated_by)
		self._add_custom_lom_listeners_handler(active_mode, updated_by)
		try:
			self.reload_led_listeners()
		except:
			self.log("_on_session_offset_changes: could not remove / add led_listeners")
			return;
		self._set_session_highlight( self._session.track_offset(), self._session.scene_offset(), self._session.width(), self._session.height(), True)
	def remove_session_box(self, combination_mode): 
		if hasattr(self, "_session"):
			self.current_track_offset = self._session._track_offset
			self.current_scene_offset = self._session._scene_offset
			self._session.set_clip_launch_buttons(None)
			self._set_session_highlight(-1, -1, -1, -1, False)
			self._session.set_stop_all_clips_button(None)
			self._session.set_stop_track_clip_buttons(None)
			self._session.set_scene_launch_buttons(None)
			if combination_mode == "on":
				self._session._unlink()
			self._session = None
	def scroll_modes(self, cnfg):
		goto = None  
		controller = getattr(self, cnfg["attached_to"])
		cnfg["value"] = controller.cur_val 
		active_mode_key = next((key for key, value in self.modes.items() if value == str(active_mode)), None)
		if cnfg["ctrl_type"] == "absolute":
			divider = (cnfg["enc_second"] - cnfg["enc_first"]) / (len(self.modes) - 1)
			if cnfg["reverse_mode"] is False:
				goto = cnfg["value"] / divider
			elif cnfg["reverse_mode"] is True:
				length = len(self.modes) - 1
				goto = (divider * length) / cnfg["value"]
			goto = int(goto)
		elif cnfg["ctrl_type"] == "relative":
			if cnfg["enc_first"] == cnfg["value"]:
				goto = int(active_mode_key) - 1
			elif cnfg["enc_second"] == cnfg["value"]:
				goto = int(active_mode_key) + 1
		elif cnfg["ctrl_type"] == "on/off": 
			if cnfg["should_it_fire"] == 3:
				goto = len(self.modes) - 1
			elif cnfg["should_it_fire"] == 2:
				goto = 0
		elif cnfg["ctrl_type"] == "increment":
			if cnfg["should_it_fire"] == 3:
				goto = int(active_mode_key) + 1
				if goto >= len(self.modes):
					goto = 0
		elif cnfg["ctrl_type"] == "decrement":
			if cnfg["should_it_fire"] == 3:
				goto = int(active_mode_key) - 1
				if goto < 0:
					goto = len(self.modes) - 1
		if goto is not None and goto < len(self.modes) and goto >= 0 and active_mode != self.modes[goto]:
			self.set_active_mode(self.modes[goto])
	def listening_to_tracks(self):
		self.remove_listening_to_tracks()
		modesArr = self.modes_arr()
		for mode in modesArr:
			for index in range(len(self.song().tracks)):
				_track = self.song().tracks[index]
				if _track.can_be_armed and hasattr(self, "_mode" + mode + "_arm_listener"):
					_track.add_arm_listener(getattr(self, "_mode" + mode + "_arm_listener"))
				if hasattr(self, "_mode" + mode + "_mute_listener"):
					_track.add_mute_listener(getattr(self, "_mode" + mode + "_mute_listener"))
				if hasattr(self, "_mode" + mode + "_solo_listener"):
					_track.add_solo_listener(getattr(self, "_mode" + mode + "_solo_listener"))
				if hasattr(self, "_mode" + mode + "_volume_listener"):
					_track.mixer_device.volume.add_value_listener(getattr(self, "_mode" + mode + "_volume_listener"))
				if hasattr(self, "_mode" + mode + "_panning_listener"):
					_track.mixer_device.panning.add_value_listener(getattr(self, "_mode" + mode + "_panning_listener"))
				if hasattr(self, "_mode" + mode + "_send_listener"):
					for send_index in range(len(_track.mixer_device.sends)):
						_track.mixer_device.sends[send_index].add_value_listener(getattr(self, "_mode" + mode + "_send_listener"))
			for index in range(len(self.song().return_tracks)):
				_return_track = self.song().return_tracks[index]
				if hasattr(self, "_mode" + mode + "_mute_listener"):
					_return_track.add_mute_listener(getattr(self, "_mode" + mode + "_mute_listener"))
				if hasattr(self, "_mode" + mode + "_solo_listener"):
					_return_track.add_solo_listener(getattr(self, "_mode" + mode + "_solo_listener"))
				if hasattr(self, "_mode" + mode + "_volume_listener"):
					_return_track.mixer_device.volume.add_value_listener(getattr(self, "_mode" + mode + "_volume_listener"))
				if hasattr(self, "_mode" + mode + "_panning_listener"):
					_return_track.mixer_device.panning.add_value_listener(getattr(self, "_mode" + mode + "_panning_listener"))
				if hasattr(self, "_mode" + mode + "_send_listener"):
					for send_index in range(len(_return_track.mixer_device.sends)):
						_return_track.mixer_device.sends[send_index].add_value_listener(getattr(self, "_mode" + mode + "_send_listener"))
			_master = self.song().master_track
			if hasattr(self, "_mode" + mode + "_volume_listener"):
				_master.mixer_device.volume.add_value_listener(getattr(self, "_mode" + mode + "_volume_listener"))
			if hasattr(self, "_mode" + mode + "_panning_listener"):
				_master.mixer_device.panning.add_value_listener(getattr(self, "_mode" + mode + "_panning_listener"))
	def remove_listening_to_tracks(self):
		global mode
		modesArr = self.modes_arr()
		for mode in modesArr:
			for index in range(len(self.song().tracks)):
				_track = self.song().tracks[index]
				if hasattr(self, "_mode" + mode + "_arm_listener"):
					if _track.arm_has_listener(getattr(self, "_mode" + mode + "_arm_listener")):
						_track.remove_arm_listener(getattr(self, "_mode" + mode + "_arm_listener"))
				if hasattr(self, "_mode" + mode + "_mute_listener"):
					if _track.mute_has_listener(getattr(self, "_mode" + mode + "_mute_listener")):
						_track.remove_mute_listener(getattr(self, "_mode" + mode + "_mute_listener"))
				if hasattr(self, "_mode" + mode + "_solo_listener"):
					if _track.solo_has_listener(getattr(self, "_mode" + mode + "_solo_listener")):
						_track.remove_solo_listener(getattr(self, "_mode" + mode + "_solo_listener"))
				if hasattr(self, "_mode" + mode + "_volume_listener"):
					if _track.mixer_device.volume.value_has_listener(getattr(self, "_mode" + mode + "_volume_listener")):
						_track.mixer_device.volume.remove_value_listener(getattr(self, "_mode" + mode + "_volume_listener"))
				if hasattr(self, "_mode" + mode + "_panning_listener"):
					if _track.mixer_device.panning.value_has_listener(getattr(self, "_mode" + mode + "_panning_listener")):
						_track.mixer_device.panning.remove_value_listener(getattr(self, "_mode" + mode + "_panning_listener"))
				if hasattr(self, "_mode" + mode + "_send_listener"):
					for send_index in range(len(_track.mixer_device.sends)):
						if _track.mixer_device.sends[send_index].value_has_listener(getattr(self, "_mode" + mode + "_send_listener")):
							_track.mixer_device.sends[send_index].remove_value_listener(getattr(self, "_mode" + mode + "_send_listener"))
			for index in range(len(self.song().return_tracks)):
				_return_track = self.song().return_tracks[index]
				if hasattr(self, "_mode" + mode + "_mute_listener"):
					if _return_track.mute_has_listener(getattr(self, "_mode" + mode + "_mute_listener")):
						_return_track.remove_mute_listener(getattr(self, "_mode" + mode + "_mute_listener"))
				if hasattr(self, "_mode" + mode + "_solo_listener"):
					if _return_track.solo_has_listener(getattr(self, "_mode" + mode + "_solo_listener")):
						_return_track.remove_solo_listener(getattr(self, "_mode" + mode + "_solo_listener"))
				if hasattr(self, "_mode" + mode + "_volume_listener"):
					if _return_track.mixer_device.volume.value_has_listener(getattr(self, "_mode" + mode + "_volume_listener")):
						_return_track.mixer_device.volume.remove_value_listener(getattr(self, "_mode" + mode + "_volume_listener"))
				if hasattr(self, "_mode" + mode + "_panning_listener"):
					if _return_track.mixer_device.panning.value_has_listener(getattr(self, "_mode" + mode + "_panning_listener")):
						_return_track.mixer_device.panning.remove_value_listener(getattr(self, "_mode" + mode + "_panning_listener"))
				if hasattr(self, "_mode" + mode + "_send_listener"):
					for send_index in range(len(_return_track.mixer_device.sends)):
						if _return_track.mixer_device.sends[send_index].value_has_listener(getattr(self, "_mode" + mode + "_send_listener")):
							_return_track.mixer_device.sends[send_index].remove_value_listener(getattr(self, "_mode" + mode + "_send_listener"))
			_master = self.song().master_track
			if hasattr(self, "_mode" + mode + "_volume_listener"):
				if _master.mixer_device.volume.value_has_listener(getattr(self, "_mode" + mode + "_volume_listener")):
					_master.mixer_device.volume.remove_value_listener(getattr(self, "_mode" + mode + "_volume_listener"))
			if hasattr(self, "_mode" + mode + "_panning_listener"):
				if _master.mixer_device.panning.value_has_listener(getattr(self, "_mode" + mode + "_panning_listener")):
					_master.mixer_device.panning.remove_value_listener(getattr(self, "_mode" + mode + "_panning_listener"))
	def set_global_mode(self):
		if hasattr(self, 'global_mode') and len(self.global_mode) > 0:
			activate_global = getattr(self, '_mode' + self.global_mode[0])
			activate_global()
			self.generate_relative_tracks_dict()
			self.call_script_reaction(self.global_mode[0], None, 'mode_is_activated') 
	def set_active_mode(self, activate_new_mode):
		global active_mode, prev_active_mode, modes
		for number, mode_id in list(self.modes.items()):
			if mode_id == activate_new_mode:
				self.key_num = mode_id
		if(activate_new_mode == "Previous Mode"):
			if 'prev_active_mode' not in globals():
				self.show_message("No previous mode is set yet.")
			else:
				remove_mode = getattr(self, "_remove_mode" + active_mode)
				remove_mode()
				activate_new_mode = prev_active_mode
				prev_active_mode = active_mode
				self.call_script_reaction(prev_active_mode, None, 'mode_is_deactivated') 
				active_mode = activate_new_mode
				mode_to_call = getattr(self, "_mode" + activate_new_mode)
				mode_to_call()
				self.generate_relative_tracks_dict()
				self.call_script_reaction(activate_new_mode, None, 'mode_is_activated') 
		else:
			if 'active_mode' in globals():
				remove_mode = getattr(self, "_remove_mode" + active_mode)
				remove_mode()
				prev_active_mode = active_mode
				self.call_script_reaction(prev_active_mode, None, 'mode_is_deactivated') 
			active_mode = activate_new_mode 
			mode_to_call = getattr(self, "_mode" + activate_new_mode)
			mode_to_call()
			self.generate_relative_tracks_dict()
			self.call_script_reaction(activate_new_mode, None, 'mode_is_activated') 
	def target_by_name(self, target_list, name):
		matches = [t for t in target_list if t.display_name == name]
		if matches:
			return matches[0]
		return
	def _add_custom_lom_listeners_handler(self, mode_number, updated_by=False):
		global active_mode
		modesArr = self.modes_arr()
		for mode in modesArr:
			name_string = "_mode" + str(mode) + "_custom_lom_listeners"
			if hasattr(self, name_string):
				try:
					mode_to_call = getattr(self, name_string)
					mode_to_call(updated_by)  
				except:
					self.log_message("csslog: unable to run " + name_string)
					pass
	def _remove_custom_lom_listeners_handler(self, mode_number, updated_by=False):
		global active_mode
		modesArr = self.modes_arr()
		for mode in modesArr:
			name_string = "_remove_mode" + str(mode) + "_custom_lom_listeners"
			if hasattr(self, name_string):
				try:
					mode_to_call = getattr(self, name_string)
					mode_to_call(updated_by)
				except:
					self.log_message("csslog: unable to run " + name_string)
					pass
	def get_modifier_value(self, mod_name):
		return self.modifiers[mod_name]["value"]
	def set_modifier_value(self, mod_name, contents):
		global active_mode
		modesArr = self.modes_arr()
		for mode in modesArr:
			self.modifiers[mod_name]["value"] = contents 
			self.call_script_reaction(mode, mod_name, "modifier_was_updated")
	def call_script_reaction(self, mode_id, param2, reaction_name):
		one = "";   
		two = "";   
		three = ""; 
		if(mode_id!=None):
			one = "_mode_" + str(mode_id)
		if(param2!=None):
			two = "_" + str(param2)
		if(reaction_name!=None):
			three = "_" + str(reaction_name)
		reaction_method = one + two + three
		if hasattr(self, reaction_method):
			getattr(self, reaction_method)()
		else: 
			return
	def disconnect(self):
		for input_item in self.input_map:
			method_to_call = getattr(self, input_item)
			method_to_call.send_value(0)
		self.call_script_reaction(None, None, 'script_is_disconnected')